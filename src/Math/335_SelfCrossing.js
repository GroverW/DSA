/*
You are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west, x[2] metres to the south, x[3] metres to the east and so on. In other words, after each move your direction changes counter-clockwise.

Write a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.

 

Example 1:

┌───┐
│   │
└───┼──>
    │

Input: [2,1,1,2]
Output: true
Example 2:

┌──────┐
│      │
│
│
└────────────>

Input: [1,2,3,4]
Output: false 
Example 3:

┌───┐
│   │
└───┼>

Input: [1,1,1,1]
Output: true 
*/

var isSelfCrossing = function (x) {
  if (x.length < 4) return false;
  const directions = [
    [0, 1],
    [-1, 0],
    [0, -1],
    [1, 0]
  ];

  const lastPosition = [
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
  ]

  let lastDirection = 3;
  let isInwardSpiral = false;
  let changedOutwardToInward = false;
  let isBlockedInTransition = false;

  for (let i = 0; i < x.length; i += 1) {
    const distance = x[i];
    const currDirection = (lastDirection + 1) % 4;
    const [, , xEnd, yEnd] = lastPosition[lastDirection];
    const [lastXStart, lastYStart, lastXEnd, lastYEnd] = lastPosition[currDirection];
    const [xDiff, yDiff] = directions[currDirection];
    const [nextX, nextY] = [xEnd + xDiff * distance, yEnd + yDiff * distance];

    if (isInwardSpiral) {
      if (
        (xDiff < 0 && nextX <= lastXEnd)
        || (xDiff > 0 && nextX >= lastXEnd)
        || (yDiff < 0 && nextY <= lastYEnd)
        || (yDiff > 0 && nextY >= lastYEnd)
      ) return true;
    } else if (changedOutwardToInward) {
      if (
        i === 3
        && nextY >= 0
        && nextX >= 0
      ) return true;

      if (
        i === 4
        && nextX === 0
        && nextY >= 0
      ) return true

      if (
        i > 4
        && (
          isBlockedInTransition === true &&
          ((xDiff < 0 && nextX <= lastXStart)
          || (xDiff > 0 && nextX >= lastXStart)
          || (yDiff < 0 && nextY <= lastYStart)
          || (yDiff > 0 && nextY >= lastYStart))
        )
      ) return true;

      isInwardSpiral = true;
      changedOutwardToInward = false;
    } else if (
      (xDiff < 0 && nextX >= lastXEnd)
      || (xDiff > 0 && nextX <= lastXEnd)
      || (yDiff < 0 && nextY >= lastYEnd)
      || (yDiff > 0 && nextY <= lastYEnd)
    ) {
      changedOutwardToInward = true;
      if (
        (xDiff < 0 && nextX <= lastXStart)
        || (xDiff > 0 && nextX >= lastXStart)
        || (yDiff < 0 && nextY <= lastYStart)
        || (yDiff > 0 && nextY >= lastYStart)
      ) isBlockedInTransition = true;
    }

    lastPosition[currDirection] = [xEnd, yEnd, nextX, nextY];
    lastDirection = currDirection;
  }

  return false;
};

/*




[1,1,3,2,1,1]

[0,0]
[0,1]
[-1,1]
[-1,-2]
[1,-2]
[1,-1]
[0,-1]

            
       3----2  
       |    |  
       |    1  
       |    7--6
       |       |
       4-------5

[1,1,2,2,3,1,1]

[0,0]
[0,1]
[-1,1]
[-1,-1]
[1,-1]
[1,2]
[0,2]
[0,1]
            7--6
       3----2  |
       |    |  |
       |    1  |
       4-------5



        3----------2
        | 7------6 \
        |        | \
        4--------5 1

        3----------2
        |       6  |
        |       |  1
        4-------5

      7--------------6
      | 3----------2 |
      | |          | | 
      8 |          1 |
        4------------5

    3----------------2
    |                |
    |                1
    |
    | 7--------------6
    | |              |
    | |              |
    | |              |
    | 8              |
    |                |
    |                |
    4----------------5

    [2,5,10,5,8]

    inside spiral
      - >= last x/y val in same direction
    outside spiral
      - <= last x/y becomes inside spiral
    on spiral
      - cross 0/0
*/

// const maxDist = 15;
// for (let i = 0; i < 20; i += 1) {
//   const numDistances = Math.floor(Math.random() * 40) + 1;

//   const distances = [];
//   for (let j = 0; j < numDistances; j += 1) {
//     const distance = Math.floor(Math.random() * maxDist);
//     distances.push(distance);
//   }
//   logOutList(printRow(distances));
// }

/*

*/

const tests = [
  [1, 1, 3, 2, 1, 1],
  [1, 1, 3, 2, 2, 1],
  [1, 1, 2, 2, 3, 1, 1],
  [2, 1, 1, 2],
  [2, 5, 10, 5, 11],
  [2, 5, 10, 5, 8],
  [2, 5, 10, 5, 9],
  [1, 2, 3, 4],
  [1, 1, 1, 1],
  [12, 14, 6, 14, 6, 7, 15, 11, 15, 1, 9, 8, 12, 14, 7, 3],
  [2, 10, 4, 11, 3, 15, 15, 10, 9, 6, 15, 1, 3],
  [7, 6, 5, 4, 3, 8, 6, 3, 15, 5, 8, 8, 8, 8, 2, 4, 6, 4, 5],
  [7, 14, 7, 15, 1, 12, 2, 1, 1, 5, 8, 2, 5, 2, 10, 9, 11, 1, 11, 2, 5, 5, 7, 15, 1, 10, 6, 5, 1, 10, 13, 11],
  [6, 7, 5, 10, 10, 5, 12, 9, 11, 10, 12, 3],
  [12, 10, 1, 2, 3, 12, 13, 7, 9, 2, 15, 4, 1, 10, 10, 10],
  [1, 11, 6, 3, 10, 15, 2, 7, 14, 8, 5, 11, 15, 2, 3, 14, 2, 5, 6, 13, 2, 9, 3, 2, 12, 3, 11, 1, 15, 6, 12, 14, 5, 15, 11],
  [6, 9, 3, 4, 8, 5, 4, 1, 5, 3, 13, 10, 8, 6, 6, 6, 2, 15, 9, 13, 4, 4, 1, 3, 6, 7, 13],
  [3, 12, 1, 4, 14, 3, 5, 5, 7, 4, 6, 14, 12, 6, 5, 10, 15, 1, 6, 8, 9, 3, 13, 6, 6, 8, 7, 14, 7, 15, 15, 13, 11, 14, 3, 9, 6, 11, 7, 2],
  [13, 1, 9, 6, 9, 6, 10, 13, 9, 11, 5, 4, 13, 2, 14, 5, 1, 12, 2, 11, 11, 4, 4, 11, 14],
  [12, 15, 14, 15, 11, 5, 10, 2, 12, 12, 10, 5, 9],
  [9, 5, 8, 10, 6, 7, 12, 10, 3, 5, 3, 6, 8, 11, 10, 13, 6, 9, 12, 7, 1, 11, 1, 13, 3, 15],
  [4, 8, 6, 12, 3, 3, 2, 11, 2, 8, 15, 10, 2, 11, 9],
  [11, 8, 5],
  [11, 12, 11, 12, 4, 1, 11, 7, 4, 3, 3, 7, 4, 4, 8, 5, 1],
  [6, 14, 12, 4, 6, 4, 2, 10, 1, 10, 5, 9, 15],
  [12, 11, 15, 10, 1, 3, 11, 5, 13, 1, 1, 15, 10, 1, 13, 12, 5, 10, 2, 6, 12, 6, 9, 7, 15, 13, 14, 15, 12, 9, 9, 9, 14, 12, 1],
  [6, 7, 13, 10, 9, 14, 11, 13, 10, 6, 1, 3, 15, 2, 6, 2, 9, 7, 11],
  [7, 5, 4, 3, 1, 11, 8, 9, 6, 14, 6, 3, 9, 12, 1, 15, 8, 5, 1, 1, 4, 3, 9, 2, 8, 2, 6, 3, 1, 4, 3, 14, 4, 6, 7, 1, 5, 3, 7],
  [14, 12, 8, 4],
  [14, 3, 5, 7, 14, 1, 8, 7],
  [2, 12, 6, 2, 14, 4],
  [3, 14, 9],
  [2],
  [15, 10, 14, 8, 9, 6, 7, 9, 3, 8, 10, 15, 3, 4, 5, 4, 6, 14, 2, 11, 8, 12, 10],
  [7, 13, 15, 14, 15, 6, 14, 5, 12, 6, 5, 14, 14, 4, 15, 13, 1, 5, 3],
  [7, 14, 15, 11, 11, 5, 3, 13, 5, 13, 15, 4, 3, 9, 2, 12, 14, 8, 11, 12, 6, 3, 2, 9, 15, 7, 7, 7, 13, 11, 12, 10, 9, 1, 2, 5, 9, 14, 9],
  [1, 1, 6, 5, 3, 10, 10, 11, 6, 12, 6, 13, 9, 11, 9, 6, 15, 3, 14, 9, 5, 4, 2, 6, 13, 7],
  [15, 6, 11, 14, 3, 13, 4, 6, 13, 15, 12, 15, 10, 10, 5, 7, 8, 3, 5, 7],
  [1, 13],
  [10, 10, 7, 8, 14, 15, 4, 14, 14, 4, 9, 15, 14, 10, 3, 10, 9, 6, 10, 1, 15, 14, 13],
  [13, 1, 14, 9, 12, 9, 6, 5, 15, 14, 5, 13, 4, 6],
  [9, 8, 13, 14, 8, 11, 1, 4],
  [8, 8, 8, 6],
  [12, 4, 2, 1],
  [5, 8, 7, 5, 8, 14, 13, 7, 3, 14, 9, 7, 9, 14, 1, 2, 9, 10],
  [8, 8, 10, 5, 13, 9, 14, 4, 6],
  [10, 2, 6, 6, 4, 2, 13, 3, 1, 10, 14, 6, 4, 3, 7, 1, 15, 1, 12, 8, 15, 6, 15, 11, 4, 4, 12],
  [14, 13, 2, 15, 1, 5, 12, 3, 15, 5, 14, 15, 5, 13, 3, 1, 8, 3, 10, 6, 5, 13, 10, 2, 12],
  [11, 12, 6, 14, 5, 1, 9, 12, 11, 3, 12, 15, 7, 6, 1, 10, 1],
  [14, 12, 2, 1, 7, 9, 12, 7, 11, 12, 3, 15, 7, 12, 14, 6],
  [8, 3],
  [10, 15, 5, 15, 2, 15, 13, 15, 1, 8, 4, 10, 7, 5, 12, 5, 14, 15, 3, 2, 7, 6, 9, 13, 4, 9, 12, 12, 8, 12, 4, 14, 2, 6, 12, 2, 2, 3, 8],
  [2, 3, 3, 3, 9, 5, 15, 8, 10, 4, 14, 10, 7, 8, 5, 2, 15, 6],
  [5, 15, 9, 14, 1, 6, 7, 9, 6],
  [15, 11, 14, 3, 13, 1, 12, 14, 10, 9, 13, 4, 11, 4, 8, 8, 14, 2, 7, 10, 14, 6, 2, 5, 1, 2, 1, 2, 9, 9, 6, 6, 10, 6],
  [15, 12, 4, 11, 14, 1, 15, 6, 14, 15, 4, 7, 4, 6, 15, 8, 2, 15, 10, 14, 9, 4, 15, 1, 6, 3, 12, 10, 11, 4, 12, 3, 7, 15],
  [13, 5, 4, 1, 7, 13, 10, 3, 15, 6, 4, 9, 8, 8, 14, 6, 9, 15, 10, 5, 6, 7, 15, 6, 12, 15, 5, 6, 11, 8, 15, 14],
  [13, 15, 11, 15, 4, 1, 5, 3, 4, 10, 12, 4, 12, 10, 11, 12, 4, 1, 6, 11, 10, 6, 6, 11, 8, 6, 11, 13, 13, 6, 9, 13, 15, 3, 13],
  [14, 15, 13, 6, 14, 6, 8, 15, 12, 3, 15, 8, 12, 13, 6, 3, 8, 1, 2, 5, 6, 1, 9, 13, 4, 5, 10, 7, 3, 6, 12, 10, 14, 6],
  [14, 11, 3, 2, 1, 3, 13, 7, 15, 12, 1],
  [1, 14, 1, 12, 5, 7, 10, 4, 11, 6, 7, 12, 5, 4, 3, 7, 10],
  [10, 6, 13, 15, 11, 15, 10, 1, 13, 11, 1, 6, 5, 9, 14, 4, 2, 2, 9, 6, 13],
  [3, 6, 11, 14, 12, 6, 5, 5, 2, 8, 5, 3, 12, 3, 9, 1, 8, 14, 15, 7, 10, 3, 1],
  [13, 2, 1, 11, 6, 12, 14, 11, 12, 4, 1, 6, 10, 9, 9, 15, 13, 13, 8, 1, 9, 10],
  [3, 6, 12, 7, 1, 12, 13, 13, 11, 4],
  [13, 9, 12, 6, 7, 13, 15, 1],
  [12, 13, 4, 2, 7, 12, 9, 12, 2, 9, 6, 10],
  [5, 4, 13, 5, 12, 8, 10, 1, 11, 12, 5, 1, 15, 1, 3, 15, 5, 8, 5, 4, 5, 10, 10, 6, 12, 9, 9, 7],
  [13, 5, 3, 4, 7, 4, 14, 12, 15, 3, 3, 5, 14, 12, 2, 7, 11, 11, 7, 7, 12, 11, 9, 3, 11, 8, 5, 7, 11],
  [10, 12, 13, 8, 13, 14, 7, 3, 9, 2, 7],
  [7, 5, 8, 4, 3],
  [15, 14, 6, 2, 8, 4, 15, 7, 3, 1, 8, 2, 9, 8, 5, 14, 5, 4, 9, 4, 12, 14, 3, 12, 7, 2, 10, 15, 11],
  [5, 12, 9, 14, 11, 10, 8, 10, 1, 14, 4, 14, 14, 6, 14, 15, 1],
  [2, 2, 13, 11, 9, 2, 3, 12, 14, 9, 2, 11, 6, 9, 1, 6, 4, 11, 6, 11, 7, 2, 7, 14, 15, 13, 4, 10, 9, 12, 15, 13, 3, 12, 12],
  [7, 1, 14, 14, 14, 15, 9, 1, 5, 5, 2, 9, 3, 6, 6, 4, 7, 12, 5, 4, 5, 8, 7, 2, 2, 11, 5, 14, 10, 12, 10, 8, 6, 13, 8, 13, 4, 11, 14],
  [14, 15, 5, 3],
  [7, 14, 15, 6, 13, 14, 4, 5, 8],
  [9, 8, 11, 7, 3, 10, 13, 15, 6, 1, 1, 11, 8, 4, 10, 10, 10, 2],
  [2, 5, 8, 7, 8, 2, 5, 1, 2, 9, 5, 13, 7, 6, 5, 10, 13, 10, 1, 6],
  [4, 7, 6, 7, 3, 10, 11, 5, 3, 15, 6, 10, 2, 12, 14, 9, 2, 6, 10, 13, 5, 1, 8, 14, 7, 12, 14, 3, 12, 4, 4, 9],
  [15, 7, 11, 15, 8, 9, 8, 5, 10, 13, 11, 6, 3, 7, 3, 4, 15, 3, 6, 2, 7, 8, 12, 4, 12, 7],
  [4, 9, 7, 5, 7, 15, 2, 14, 5, 2, 6, 9, 7, 13, 3, 4, 13, 13, 9, 13, 3, 6],
  [10, 11, 5, 15, 13, 1, 7, 9, 6, 4, 7, 3, 13, 6, 2, 3, 2, 8, 4, 2, 4, 13, 1, 11, 6, 2, 1, 7, 3, 2, 3, 10, 13, 5, 2],
  [2, 2, 4, 10, 14, 3, 15, 5, 12, 12, 2, 3, 11, 15, 2, 9, 4, 6, 3, 14, 13, 12, 1, 10, 10, 12, 15, 12],
  [4],
  [5, 9, 11],
  [5, 7, 8, 2, 7, 13, 10, 7, 9, 7, 15, 12, 13, 3, 4, 15, 2, 15, 12],
  [1, 12, 15, 11, 4, 9, 6, 9, 1, 4, 2, 14, 2, 7, 5, 13, 1, 14, 9, 14, 7, 15, 4, 1, 2, 1, 6, 14, 10, 14, 7, 8, 9, 11, 10],
  [9, 7, 13, 6, 11, 6, 11, 4, 1, 12, 1, 4, 15, 12, 5, 7, 5],
  [2, 4, 9, 3, 0, 9, 6, 6, 5, 5, 3, 6, 9, 13, 2, 10, 8, 5, 14, 4, 11, 14, 8],
  [12, 0, 2, 5, 9, 10, 0, 10, 10, 1, 0, 12, 8, 7, 4, 8, 11, 10, 13, 10, 14, 1, 0, 5, 6, 1, 12, 13, 8, 3, 7, 3, 14, 1, 7, 2, 7, 11, 6, 10],
  [9, 11, 14, 5, 7, 5, 4, 0, 4, 0, 0, 9, 10, 0, 7, 5, 7, 5, 12, 1, 0, 9, 0, 5, 2],
  [6, 10, 2, 5, 14, 14, 1, 5, 6, 4, 7, 6, 6, 6, 4, 11, 8, 6, 3, 6, 1, 0, 6, 3, 5, 10, 13, 14, 1, 7, 12, 6, 1, 5, 3, 5, 6, 10, 8, 4],
  [3, 12, 14, 5, 13, 0, 2, 13, 4, 7, 11, 8, 9, 11, 14, 0, 0, 1, 12, 14, 0, 4, 14, 13, 12, 13, 8, 4, 7, 1, 14, 0, 8, 2, 4, 5, 13, 11],
  [3, 9, 0, 1, 12, 0, 2, 4, 8, 12, 4, 1, 11, 13, 9, 10, 9, 1, 1, 11, 12, 2, 4, 6, 1, 13, 9, 1, 4, 14, 13, 11, 5, 10],
  [14, 6, 10, 1, 3, 2, 8, 7, 7, 13, 13, 11, 8, 4, 8, 10, 9, 9, 1, 14, 4, 1, 12, 2, 9, 11, 0, 13, 11, 13, 11, 7, 3, 13, 14, 12, 0],
  [3, 6, 6, 1, 0, 1, 11, 2, 13, 6, 2, 1, 6, 5, 8],
  [5, 4, 12, 10, 3, 2, 9, 11, 7, 7, 14, 5, 1, 14, 3, 5, 8, 12, 5, 2, 7, 0, 10, 1, 11, 12, 3, 11, 5, 7, 13],
  [11, 1, 4, 7, 3, 5, 8, 11, 3, 5, 4, 1, 2, 8, 2, 4, 0, 9, 4, 14, 5, 9, 0, 10],
  [12, 10, 11, 0, 13, 9, 9, 13, 5, 2, 14, 0, 14, 10, 9],
  [7, 14, 0, 5, 13, 7, 6, 3, 11, 6, 10, 14, 9, 7, 7, 0, 4, 9, 12, 14, 5, 10, 1, 2, 7, 14, 13, 11, 11, 9],
  [4, 0, 4, 2, 2, 14, 7, 11, 2, 2, 1, 2, 3, 6, 2, 7, 7, 1, 14, 3, 12, 14, 2, 5, 5, 4, 3, 11],
  [9, 10, 10, 8, 13, 12, 10, 11, 0, 3, 9, 10, 9, 12, 1, 3, 12, 3, 11, 8, 7, 12, 4, 11, 3, 13, 6, 10, 7, 8],
  [13, 12, 3, 10, 8, 4, 12, 1, 10, 0, 5, 9, 0, 6, 7, 3, 8, 1, 1, 14, 3, 7, 7, 10, 13, 1, 8, 0, 2],
  [10, 13, 13, 9, 9, 14, 0, 13, 2, 13, 13, 1, 13, 8, 11, 5, 10, 5, 14, 9, 13, 10, 1, 3, 1, 3, 9, 0, 4, 8, 8, 2, 10, 4, 6, 5, 1],
  [12, 7, 8, 4, 11, 13, 0, 13, 11, 2, 2, 1, 10, 2, 1, 8, 10, 1, 0, 5, 8, 10, 11, 14],
  [9, 11, 4, 10, 9, 0, 11, 2, 9, 4, 0, 6, 1, 9, 2, 4, 5, 3, 14],
  [3, 14, 8, 13, 13, 3, 0, 12, 4],
  [13, 0, 5, 1, 2, 10, 4, 11, 2, 12, 2, 14, 2],


];

for (let test of tests) {
  console.time(test.toString());
  logOutList(isSelfCrossing(test));
  console.timeEnd(test.toString());
}

/*
[1, 1, 2, 2, 3, 1, 1]
[2, 1, 1, 2]
[2, 5, 10, 5, 11]
[2, 5, 10, 5, 8]
[2, 5, 10, 5, 9]
[1, 2, 3, 4]
[1, 1, 1, 1]
[12, 14, 6, 14, 6, 7, 15, 11, 15, 1, 9, 8, 12, 14, 7, 3]
[2, 10, 4, 11, 3, 15, 15, 10, 9, 6, 15, 1, 3]
[7, 6, 5, 4, 3, 8, 6, 3, 15, 5, 8, 8, 8, 8, 2, 4, 6, 4, 5]
[7, 14, 7, 15, 1, 12, 2, 1, 1, 5, 8, 2, 5, 2, 10, 9, 11, 1, 11, 2, 5, 5, 7, 15, 1, 10, 6, 5, 1, 10, 13, 11]
[6, 7, 5, 10, 10, 5, 12, 9, 11, 10, 12, 3]
[12, 10, 1, 2, 3, 12, 13, 7, 9, 2, 15, 4, 1, 10, 10, 10]
[1, 11, 6, 3, 10, 15, 2, 7, 14, 8, 5, 11, 15, 2, 3, 14, 2, 5, 6, 13, 2, 9, 3, 2, 12, 3, 11, 1, 15, 6, 12, 14, 5, 15, 11]
[6, 9, 3, 4, 8, 5, 4, 1, 5, 3, 13, 10, 8, 6, 6, 6, 2, 15, 9, 13, 4, 4, 1, 3, 6, 7, 13]
[3, 12, 1, 4, 14, 3, 5, 5, 7, 4, 6, 14, 12, 6, 5, 10, 15, 1, 6, 8, 9, 3, 13, 6, 6, 8, 7, 14, 7, 15, 15, 13, 11, 14, 3, 9, 6, 11, 7, 2]
[13, 1, 9, 6, 9, 6, 10, 13, 9, 11, 5, 4, 13, 2, 14, 5, 1, 12, 2, 11, 11, 4, 4, 11, 14]
[12, 15, 14, 15, 11, 5, 10, 2, 12, 12, 10, 5, 9]
[9, 5, 8, 10, 6, 7, 12, 10, 3, 5, 3, 6, 8, 11, 10, 13, 6, 9, 12, 7, 1, 11, 1, 13, 3, 15]
[4, 8, 6, 12, 3, 3, 2, 11, 2, 8, 15, 10, 2, 11, 9]
[11, 8, 5]
[11, 12, 11, 12, 4, 1, 11, 7, 4, 3, 3, 7, 4, 4, 8, 5, 1]
[6, 14, 12, 4, 6, 4, 2, 10, 1, 10, 5, 9, 15]
[12, 11, 15, 10, 1, 3, 11, 5, 13, 1, 1, 15, 10, 1, 13, 12, 5, 10, 2, 6, 12, 6, 9, 7, 15, 13, 14, 15, 12, 9, 9, 9, 14, 12, 1]
[6, 7, 13, 10, 9, 14, 11, 13, 10, 6, 1, 3, 15, 2, 6, 2, 9, 7, 11]
[7, 5, 4, 3, 1, 11, 8, 9, 6, 14, 6, 3, 9, 12, 1, 15, 8, 5, 1, 1, 4, 3, 9, 2, 8, 2, 6, 3, 1, 4, 3, 14, 4, 6, 7, 1, 5, 3, 7]
[14, 12, 8, 4]
[14, 3, 5, 7, 14, 1, 8, 7]
[2, 12, 6, 2, 14, 4]
[3, 14, 9]
[2]
[15, 10, 14, 8, 9, 6, 7, 9, 3, 8, 10, 15, 3, 4, 5, 4, 6, 14, 2, 11, 8, 12, 10]
[7, 13, 15, 14, 15, 6, 14, 5, 12, 6, 5, 14, 14, 4, 15, 13, 1, 5, 3]
[7, 14, 15, 11, 11, 5, 3, 13, 5, 13, 15, 4, 3, 9, 2, 12, 14, 8, 11, 12, 6, 3, 2, 9, 15, 7, 7, 7, 13, 11, 12, 10, 9, 1, 2, 5, 9, 14, 9]
[1, 1, 6, 5, 3, 10, 10, 11, 6, 12, 6, 13, 9, 11, 9, 6, 15, 3, 14, 9, 5, 4, 2, 6, 13, 7]
[15, 6, 11, 14, 3, 13, 4, 6, 13, 15, 12, 15, 10, 10, 5, 7, 8, 3, 5, 7]
[1, 13]
[10, 10, 7, 8, 14, 15, 4, 14, 14, 4, 9, 15, 14, 10, 3, 10, 9, 6, 10, 1, 15, 14, 13]
[13, 1, 14, 9, 12, 9, 6, 5, 15, 14, 5, 13, 4, 6]
[9, 8, 13, 14, 8, 11, 1, 4]
[8, 8, 8, 6]
[12, 4, 2, 1]
[5, 8, 7, 5, 8, 14, 13, 7, 3, 14, 9, 7, 9, 14, 1, 2, 9, 10]
[8, 8, 10, 5, 13, 9, 14, 4, 6]
[10, 2, 6, 6, 4, 2, 13, 3, 1, 10, 14, 6, 4, 3, 7, 1, 15, 1, 12, 8, 15, 6, 15, 11, 4, 4, 12]
[14, 13, 2, 15, 1, 5, 12, 3, 15, 5, 14, 15, 5, 13, 3, 1, 8, 3, 10, 6, 5, 13, 10, 2, 12]
[11, 12, 6, 14, 5, 1, 9, 12, 11, 3, 12, 15, 7, 6, 1, 10, 1]
[14, 12, 2, 1, 7, 9, 12, 7, 11, 12, 3, 15, 7, 12, 14, 6]
[8, 3]
[10, 15, 5, 15, 2, 15, 13, 15, 1, 8, 4, 10, 7, 5, 12, 5, 14, 15, 3, 2, 7, 6, 9, 13, 4, 9, 12, 12, 8, 12, 4, 14, 2, 6, 12, 2, 2, 3, 8]
[2, 3, 3, 3, 9, 5, 15, 8, 10, 4, 14, 10, 7, 8, 5, 2, 15, 6]
[5, 15, 9, 14, 1, 6, 7, 9, 6]
[15, 11, 14, 3, 13, 1, 12, 14, 10, 9, 13, 4, 11, 4, 8, 8, 14, 2, 7, 10, 14, 6, 2, 5, 1, 2, 1, 2, 9, 9, 6, 6, 10, 6]
[15, 12, 4, 11, 14, 1, 15, 6, 14, 15, 4, 7, 4, 6, 15, 8, 2, 15, 10, 14, 9, 4, 15, 1, 6, 3, 12, 10, 11, 4, 12, 3, 7, 15]
[13, 5, 4, 1, 7, 13, 10, 3, 15, 6, 4, 9, 8, 8, 14, 6, 9, 15, 10, 5, 6, 7, 15, 6, 12, 15, 5, 6, 11, 8, 15, 14]
[13, 15, 11, 15, 4, 1, 5, 3, 4, 10, 12, 4, 12, 10, 11, 12, 4, 1, 6, 11, 10, 6, 6, 11, 8, 6, 11, 13, 13, 6, 9, 13, 15, 3, 13]
[14, 15, 13, 6, 14, 6, 8, 15, 12, 3, 15, 8, 12, 13, 6, 3, 8, 1, 2, 5, 6, 1, 9, 13, 4, 5, 10, 7, 3, 6, 12, 10, 14, 6]
[14, 11, 3, 2, 1, 3, 13, 7, 15, 12, 1]
[1, 14, 1, 12, 5, 7, 10, 4, 11, 6, 7, 12, 5, 4, 3, 7, 10]
[10, 6, 13, 15, 11, 15, 10, 1, 13, 11, 1, 6, 5, 9, 14, 4, 2, 2, 9, 6, 13]
[3, 6, 11, 14, 12, 6, 5, 5, 2, 8, 5, 3, 12, 3, 9, 1, 8, 14, 15, 7, 10, 3, 1]
[13, 2, 1, 11, 6, 12, 14, 11, 12, 4, 1, 6, 10, 9, 9, 15, 13, 13, 8, 1, 9, 10]
[3, 6, 12, 7, 1, 12, 13, 13, 11, 4]
[13, 9, 12, 6, 7, 13, 15, 1]
[12, 13, 4, 2, 7, 12, 9, 12, 2, 9, 6, 10]
[5, 4, 13, 5, 12, 8, 10, 1, 11, 12, 5, 1, 15, 1, 3, 15, 5, 8, 5, 4, 5, 10, 10, 6, 12, 9, 9, 7]
[13, 5, 3, 4, 7, 4, 14, 12, 15, 3, 3, 5, 14, 12, 2, 7, 11, 11, 7, 7, 12, 11, 9, 3, 11, 8, 5, 7, 11]
[10, 12, 13, 8, 13, 14, 7, 3, 9, 2, 7]
[7, 5, 8, 4, 3]
[15, 14, 6, 2, 8, 4, 15, 7, 3, 1, 8, 2, 9, 8, 5, 14, 5, 4, 9, 4, 12, 14, 3, 12, 7, 2, 10, 15, 11]
[5, 12, 9, 14, 11, 10, 8, 10, 1, 14, 4, 14, 14, 6, 14, 15, 1]
[2, 2, 13, 11, 9, 2, 3, 12, 14, 9, 2, 11, 6, 9, 1, 6, 4, 11, 6, 11, 7, 2, 7, 14, 15, 13, 4, 10, 9, 12, 15, 13, 3, 12, 12]
[7, 1, 14, 14, 14, 15, 9, 1, 5, 5, 2, 9, 3, 6, 6, 4, 7, 12, 5, 4, 5, 8, 7, 2, 2, 11, 5, 14, 10, 12, 10, 8, 6, 13, 8, 13, 4, 11, 14]
[14, 15, 5, 3]
[7, 14, 15, 6, 13, 14, 4, 5, 8]
[9, 8, 11, 7, 3, 10, 13, 15, 6, 1, 1, 11, 8, 4, 10, 10, 10, 2]
[2, 5, 8, 7, 8, 2, 5, 1, 2, 9, 5, 13, 7, 6, 5, 10, 13, 10, 1, 6]
[4, 7, 6, 7, 3, 10, 11, 5, 3, 15, 6, 10, 2, 12, 14, 9, 2, 6, 10, 13, 5, 1, 8, 14, 7, 12, 14, 3, 12, 4, 4, 9]
[15, 7, 11, 15, 8, 9, 8, 5, 10, 13, 11, 6, 3, 7, 3, 4, 15, 3, 6, 2, 7, 8, 12, 4, 12, 7]
[4, 9, 7, 5, 7, 15, 2, 14, 5, 2, 6, 9, 7, 13, 3, 4, 13, 13, 9, 13, 3, 6]
[10, 11, 5, 15, 13, 1, 7, 9, 6, 4, 7, 3, 13, 6, 2, 3, 2, 8, 4, 2, 4, 13, 1, 11, 6, 2, 1, 7, 3, 2, 3, 10, 13, 5, 2]
[2, 2, 4, 10, 14, 3, 15, 5, 12, 12, 2, 3, 11, 15, 2, 9, 4, 6, 3, 14, 13, 12, 1, 10, 10, 12, 15, 12]
[4]
[5, 9, 11]
[5, 7, 8, 2, 7, 13, 10, 7, 9, 7, 15, 12, 13, 3, 4, 15, 2, 15, 12]
[1, 12, 15, 11, 4, 9, 6, 9, 1, 4, 2, 14, 2, 7, 5, 13, 1, 14, 9, 14, 7, 15, 4, 1, 2, 1, 6, 14, 10, 14, 7, 8, 9, 11, 10]
[9, 7, 13, 6, 11, 6, 11, 4, 1, 12, 1, 4, 15, 12, 5, 7, 5]

[12, 0, 2, 5, 9, 10, 0, 10, 10, 1, 0, 12, 8, 7, 4, 8, 11, 10, 13, 10, 14, 1, 0, 5, 6, 1, 12, 13, 8, 3, 7, 3, 14, 1, 7, 2, 7, 11, 6, 10]
[9, 11, 14, 5, 7, 5, 4, 0, 4, 0, 0, 9, 10, 0, 7, 5, 7, 5, 12, 1, 0, 9, 0, 5, 2]
[6, 10, 2, 5, 14, 14, 1, 5, 6, 4, 7, 6, 6, 6, 4, 11, 8, 6, 3, 6, 1, 0, 6, 3, 5, 10, 13, 14, 1, 7, 12, 6, 1, 5, 3, 5, 6, 10, 8, 4]
[3, 12, 14, 5, 13, 0, 2, 13, 4, 7, 11, 8, 9, 11, 14, 0, 0, 1, 12, 14, 0, 4, 14, 13, 12, 13, 8, 4, 7, 1, 14, 0, 8, 2, 4, 5, 13, 11]
[3, 9, 0, 1, 12, 0, 2, 4, 8, 12, 4, 1, 11, 13, 9, 10, 9, 1, 1, 11, 12, 2, 4, 6, 1, 13, 9, 1, 4, 14, 13, 11, 5, 10]
[14, 6, 10, 1, 3, 2, 8, 7, 7, 13, 13, 11, 8, 4, 8, 10, 9, 9, 1, 14, 4, 1, 12, 2, 9, 11, 0, 13, 11, 13, 11, 7, 3, 13, 14, 12, 0]
[3, 6, 6, 1, 0, 1, 11, 2, 13, 6, 2, 1, 6, 5, 8]
[5, 4, 12, 10, 3, 2, 9, 11, 7, 7, 14, 5, 1, 14, 3, 5, 8, 12, 5, 2, 7, 0, 10, 1, 11, 12, 3, 11, 5, 7, 13]
[11, 1, 4, 7, 3, 5, 8, 11, 3, 5, 4, 1, 2, 8, 2, 4, 0, 9, 4, 14, 5, 9, 0, 10]
[12, 10, 11, 0, 13, 9, 9, 13, 5, 2, 14, 0, 14, 10, 9]
[7, 14, 0, 5, 13, 7, 6, 3, 11, 6, 10, 14, 9, 7, 7, 0, 4, 9, 12, 14, 5, 10, 1, 2, 7, 14, 13, 11, 11, 9]
[4, 0, 4, 2, 2, 14, 7, 11, 2, 2, 1, 2, 3, 6, 2, 7, 7, 1, 14, 3, 12, 14, 2, 5, 5, 4, 3, 11]
[9, 10, 10, 8, 13, 12, 10, 11, 0, 3, 9, 10, 9, 12, 1, 3, 12, 3, 11, 8, 7, 12, 4, 11, 3, 13, 6, 10, 7, 8]
[13, 12, 3, 10, 8, 4, 12, 1, 10, 0, 5, 9, 0, 6, 7, 3, 8, 1, 1, 14, 3, 7, 7, 10, 13, 1, 8, 0, 2]
[10, 13, 13, 9, 9, 14, 0, 13, 2, 13, 13, 1, 13, 8, 11, 5, 10, 5, 14, 9, 13, 10, 1, 3, 1, 3, 9, 0, 4, 8, 8, 2, 10, 4, 6, 5, 1]
[12, 7, 8, 4, 11, 13, 0, 13, 11, 2, 2, 1, 10, 2, 1, 8, 10, 1, 0, 5, 8, 10, 11, 14]
[9, 11, 4, 10, 9, 0, 11, 2, 9, 4, 0, 6, 1, 9, 2, 4, 5, 3, 14]
[3, 14, 8, 13, 13, 3, 0, 12, 4]
[13, 0, 5, 1, 2, 10, 4, 11, 2, 12, 2, 14, 2]
*/