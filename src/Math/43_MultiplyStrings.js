/*
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
 

Constraints:

1 <= num1.length, num2.length <= 200
num1 and num2 consist of digits only.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
*/

var multiply = function (num1, num2) {
  if (num1 === '0' || num2 === '0') return '0';

  const result = new Array(num1.length + num2.length).fill(0);

  for (let i = num1.length - 1; i >= 0; i -= 1) {
    const iDigits = num1.length - i;
    for (let j = num2.length - 1; j >= 0; j -= 1) {
      const jDigits = num2.length - j;
      const start = iDigits + jDigits - 2;

      let currProd = num1[i] * num2[j];
      let offset = 0;
      let carry = 0;

      while (currProd || carry) {
        const digit = currProd % 10;
        currProd = Math.floor(currProd / 10);
        const nextResult = result[start + offset] + digit + carry;
        carry = nextResult > 9;
        result[start + offset] = nextResult % 10;
        offset += 1;
      }
    }
  }
  while (!result[result.length - 1]) result.pop();
  return result.reverse().join('');
};

// for (let i = 0; i < 10; i += 1) {
//   const length1 = Math.floor(Math.random() * 200) + 1;
//   const length2 = Math.floor(Math.random() * 200) + 1;
//   let num1 = '';
//   let num2 = '';

//   for (let i = 0; i < length1; i += 1) {
//     if (i > 0) num1 += Math.floor(Math.random() * 10);
//     else num1 += (Math.floor(Math.random() * 9) + 1);
//   }
//   for (let j = 0; j < length2; j += 1) {
//     if (j > 0) num2 += Math.floor(Math.random() * 10);
//     else num2 += (Math.floor(Math.random() * 9) + 1);
//   }

//   logOutList(printRow([`"${num1}"`, `"${num2}"`]))
// }

const tests = [
  ["2", "3"],
  ["123", "456"],
  ["9999", "1242141"],
  ["7137191140301183125542599512113023498462484509476116331483075151861607622176225853916056621841", "2561810514349341851070622594556468920696997706571196533973639806984471342776590964207321859708455464734228051868707600972432734561309772696313109834741004"],
  ["52523901319609754997228649953998774115944032191608180585378907299356321856606081388081236891931778205660251948758726316309449842640944330092884691073982761259840", "9710379238825450937076399517284658388806369494608896686568340196"],
  ["748578467979187658916638618844193088138136170708695639333390561100270485098694778549818792122151459124462", "97074103701232515324178326482240823345641503443184195280698834452883303118048756048766585506952414"],
  ["80542668501402074946346352647853758427667789772", "96641458001506788795023643848804299352907862488399217732505117124889659020326189976"],
  ["515510319215297049493264612092718358180747081062333965019823112782662439827853892627058761297798449720535828122482502489206029870153", "4079754614952633148799398656633502064918430839798774677451935270661896"],
  ["74238521413209254423197027091527432245921730330005840013379718878357452598368199847050969216054", "70025078922406078500385368017045470952082178687405389214477281926032366813592316215781856336192283496191167900973250259351236264076701330676803951147697388642047921777727565862345369"],
  ["3200434915338389412082711396688131864418491809286310703694170253217483092539926457896535350829060131793515772347824921940497", "982137840520633027678188553976378562782180"],
  ["900685015366157908804608330629750436218559504869600314608042410499380884443672850796458702399240441311894134339036552942151497429128554949067259924795118126226", "6098890847055672528085670367056335311808368656118257759713806655856311909382458571530879083981642386824154577337153010529361235854065346907361667026178042806876184813472938467610716412765"],
  ["980093523433855270213932414384692011413198913101493094130", "2440933"],
  ["6318875742464731394899114841367918037916", "27590526286619662630527370382281461832374173566770038447364417540664091087963403409127197021481657585743766145369474248453001042057516262828507559853996806284914816757201489533"],
  ["0", "14"],
];

for (let test of tests) {
  logOutList(multiply(...test));
}