/*
You may recall that an array arr is a mountain array if and only if:

arr.length >= 3
There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
Given an integer array nums​​​, return the minimum number of elements to remove to make nums​​​ a mountain array.

 

Example 1:

Input: nums = [1,3,1]
Output: 0
Explanation: The array itself is a mountain array so we do not need to remove any elements.
Example 2:

Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].
Example 3:

Input: nums = [4,3,2,1,1,2,3,1]
Output: 4
Example 4:

Input: nums = [1,2,3,4,4,3,2,1]
Output: 1
 

Constraints:

3 <= nums.length <= 1000
1 <= nums[i] <= 109
It is guaranteed that you can make a mountain array out of nums.
*/

var minimumMountainRemovals = function (nums) {
  const seqInc = [];
  const maxInc = [];
  for (let num of nums) {
    const idx = getMinGreater(seqInc, num);
    if (idx === seqInc.length) seqInc.push(num);
    else seqInc[idx] = num;
    maxInc.push(seqInc.length);
  }

  const seqDec = [];
  const maxDec = [];
  for (let i = nums.length - 1; i >= 0; i -= 1) {
    const idx = getMinGreater(seqDec, nums[i]);
    if (idx === seqDec.length) seqDec.push(nums[i]);
    else seqDec[idx] = nums[i];
    maxDec.push(seqDec.length);
  }

  let minRemovals = nums.length;
  for (let i = 1; i < nums.length - 1; i += 1) {
    if (maxInc[i] === 1 || maxDec[nums.length - i - 1] === 1) continue;
    minRemovals = Math.min(
      minRemovals,
      nums.length - (maxInc[i] + maxDec[nums.length - i - 1] - 1),
    )
  }

  return Math.max(0, minRemovals);
};

const getMinGreater = (nums, target) => {
  const last = nums[nums.length - 1];
  if (target > last || !nums.length) return nums.length;

  let left = 0;
  let right = nums.length - 1;
  let mid;

  while (left < right) {
    mid = Math.floor((left + right) / 2)

    if (nums[mid] === target) return mid;
    else if (nums[mid] > target) {
      right = mid;
    } else {
      left = mid + 1;
    }
  }

  return right;
};


/*

*/

// const maxLen = 100;
// for (let i = 0; i < 20; i += 1) {
//   const len = Math.floor(Math.random() * maxLen) + 3;
//   const peakIdx = Math.floor(Math.random() * (len - 1)) + 1;
//   const peakVal = Math.floor(Math.random() * 50);

//   const nums = [];
//   for (let j = 0; j < len; j += 1) {
//     const max = Math.random() < 0.2 ? 1.5 * peakVal : peakVal
//     const num = Math.floor(Math.random() * (max - 1)) + 1;
//     nums.push(num);
//   }

//   nums[peakIdx] = peakVal;
//   logOutList(printRow(nums));
// }

/*

*/

const tests = [
  [100, 92, 89, 77, 74, 66, 64, 66, 64],
  [64, 66, 64, 66, 74, 77, 89, 92, 100],
  [1, 3, 1],
  [2, 1, 1, 5, 6, 2, 3, 1],
  [4, 3, 2, 1, 1, 2, 3, 1],
  [1, 2, 3, 4, 4, 3, 2, 1],
  [11, 12, 19, 38, 6, 37, 44, 33, 11, 29, 17, 19, 4, 11, 31, 49, 32, 29, 25, 1, 25, 11, 4, 2, 8, 29, 7, 5, 28, 10, 31, 21, 24, 10, 24, 28, 31, 46, 26, 49, 30, 17, 3, 19, 17, 7, 30, 18, 22, 2, 3, 17, 7, 20, 4, 16, 14, 22, 1, 31, 12, 20, 1, 21, 28, 6, 16, 23, 17, 41, 13, 1, 27, 3, 29, 1, 31, 25, 10, 11, 11, 20, 8, 23, 15, 19, 20, 37, 1, 13, 14, 4, 12, 19],
  [10, 3, 12, 17, 3, 24, 1, 50, 25, 33, 13, 10, 27, 5, 20, 36, 3, 30, 22, 35, 35, 5, 14, 1, 25, 33, 1, 32, 16, 15, 25, 24, 3, 18, 3, 26, 32, 20, 26, 17, 20, 17, 2, 2, 17, 17, 14, 5, 1],
  [26, 28, 27, 30, 7, 18, 14, 23, 13, 8, 2, 5, 24, 19, 3, 20, 24, 17, 34, 22, 30, 16, 9, 42, 14, 7, 21, 20, 4, 18, 3, 14, 31, 34, 9, 8, 28, 33, 9, 12, 29, 35, 19, 23, 20, 20, 34, 22, 51, 23],
  [30, 2, 6, 3, 15, 10, 15, 1, 6, 3, 17, 13, 1, 1, 3, 15, 4, 19, 7, 29, 10, 7, 5, 9, 3, 2, 3, 20, 14, 6, 7, 11, 6, 9, 1, 7, 31, 4, 2, 5, 1, 15, 22, 7, 16, 3, 7, 32, 10, 15, 26, 7, 9, 6, 20, 7, 21, 14, 1, 17, 20, 16, 4, 13, 10, 6, 17, 28, 8, 14, 9, 14, 3, 28, 3, 12, 8, 17, 11, 11, 6, 6, 9, 10, 10, 13, 5, 11, 31],
  [1, 20, 4, 23, 12, 13, 13, 9, 9, 14, 4, 13, 16, 5, 10, 4, 5, 2, 25, 6, 5, 26, 3, 2, 22, 7, 4, 16, 8, 18, 6, 5, 12, 19, 34, 18, 18, 3, 1, 11, 10, 13, 10, 1, 13],
  [6, 1, 4, 5, 3, 5, 1, 6, 2, 2],
  [6, 34, 22, 6, 46, 29, 17, 10, 38, 29, 40, 11, 20, 4, 45, 30, 39, 18, 31, 28, 1, 38, 23, 28, 10, 14, 27, 24, 44, 14, 37, 14, 39, 3, 24, 7, 35, 22, 4, 42, 15, 9, 40, 20, 1, 2, 33, 27, 30, 23, 16, 30, 35, 8, 35, 21, 24, 22, 32, 3, 14, 1, 16, 7, 14, 14, 36, 7, 34, 2, 37, 21, 4, 26, 5, 12, 38, 1, 2, 12],
  [4, 16, 4, 2, 6, 10, 13, 5, 7, 12, 9, 10, 19, 7, 4, 16, 14, 10, 8, 9, 23, 8, 1, 1, 10, 12, 14, 12, 1, 11, 17, 17, 8, 6, 16, 5, 6, 17, 9, 18, 6, 12, 12, 14, 15, 17, 18, 10, 4, 2, 9, 4, 7, 5, 20, 3, 8, 16, 18, 6, 13, 11, 4, 3, 8, 6, 7, 2, 16, 15, 15, 14, 20, 9, 12, 18, 1, 3, 10, 4, 7, 4, 4, 2, 17, 4, 14, 17, 12, 8, 17, 8],
  [22, 21, 1, 1, 14, 32, 25, 15, 24, 18, 20, 15, 12, 2, 24, 16, 17, 38, 18, 23, 25, 22, 23, 16, 30, 11, 5, 24, 22, 3, 18, 9, 14, 2, 22, 8, 8, 13, 1, 16, 5, 12, 7, 17, 7, 2, 12, 22, 18, 14, 3, 4, 2, 17, 1, 11, 3, 15, 4, 2, 6, 5, 26, 18, 3, 25, 10, 18, 20, 22],
  [1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 3, 2, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 2, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 2, 1],
  [1, 13, 12, 28, 16, 2, 45, 62, 33, 39, 27, 42, 33, 14, 10, 11, 10, 22, 28, 62, 10, 37, 9, 20, 38, 25, 32, 16, 14, 44, 39, 17, 29, 18, 17, 14, 20, 18, 5, 38, 13, 40, 38, 11, 54, 4, 1, 9, 10, 38, 14, 1, 24, 10, 2, 4, 11, 28, 33, 31, 23, 15, 32, 18, 22, 35],
  [14, 15, 7, 1, 14, 7, 1, 8, 7, 3, 11, 1, 8, 1, 9, 6, 6, 5, 12, 13, 15, 4, 11, 6, 23, 1, 15, 8, 15, 11, 14, 18, 2, 12, 12, 15, 5, 12, 1, 9, 7, 7, 13, 14, 5, 6, 1, 6, 6, 7, 6, 10, 14, 16, 13, 7, 15],
  [16, 8, 10, 12, 16, 12, 19, 6, 10, 14, 12, 4, 3, 5, 23, 6, 13, 1, 15, 9, 12, 1, 7, 4, 10, 7, 2, 1, 17, 1, 24, 6, 15, 4, 19, 1, 9, 1, 14, 16, 20, 13, 9, 1, 8, 2, 10, 16, 10, 14, 9, 16, 14, 2, 25, 15, 3, 8, 16, 3, 9, 5],
  [32, 43, 29, 56, 3, 45, 18, 44, 28, 37, 30, 12, 10, 3, 19, 13, 28, 33, 20, 1, 10, 61, 6, 1, 11, 7, 31, 6, 43, 6, 41, 22, 10, 14, 6, 20, 43, 19, 41, 9, 33, 41, 45, 11, 39, 24, 27, 31],
  [26, 13, 5, 6, 4, 3, 1, 31, 23, 31, 26, 45, 1],
  [20, 31, 12, 4, 29, 50, 9, 1, 29, 20, 7, 29, 22, 10, 23, 32, 14, 34, 24, 12, 26, 1, 32, 5, 27, 10, 31, 5, 45, 6, 11, 3, 15, 31, 5, 8, 23, 29, 30, 1, 11, 26, 14, 8, 4, 32, 11, 26, 29, 27, 14, 23, 5, 27, 32, 12],
  [1, 4, 2, 18, 22, 15],
  [45, 1, 3, 7, 1, 7, 25, 2, 31, 39, 14, 33, 34, 13, 37, 24, 15, 2, 2, 20, 15, 16, 34, 35, 27, 13, 9, 33, 10, 34, 12, 1, 2, 20, 6, 12, 3, 20, 22, 30, 2, 23, 14, 31, 22, 12, 33, 32, 3, 41, 3, 34, 15, 11, 1, 29, 10, 28, 1, 21, 5, 19, 9, 16, 5, 24, 19, 28, 21, 17, 9, 31],
  [4, 1, 27, 10, 4, 20, 3, 15, 27, 23, 6, 7],
  [19, 31, 13, 23, 56, 37, 17, 31, 6, 8, 31, 27, 37, 58, 35, 26, 20, 20, 14, 33, 14, 11, 43, 24, 17, 12, 58, 6, 20, 16, 54, 8, 6, 19, 6, 27, 22, 34, 24, 21, 57, 7, 19, 23, 37, 19, 36, 32, 11, 32, 6, 39, 29, 36, 4, 33, 41, 7, 9, 6, 25, 7, 48, 19, 37, 8, 20, 24, 5, 33, 1, 22, 19, 15, 7, 38, 57, 33, 54, 7, 24, 29, 30, 17, 28, 16, 8, 13, 12, 50, 31, 34, 1, 30, 22, 30, 18],
];

let i = 0;
for (let test of tests) {
  console.time(i);
  logOutList(minimumMountainRemovals(test));
  console.timeEnd(i);
  i += 1;
}

/*
[1, 3, 1]
[2, 1, 1, 5, 6, 2, 3, 1]
[4, 3, 2, 1, 1, 2, 3, 1]
[1, 2, 3, 4, 4, 3, 2, 1]
[11, 12, 19, 38, 6, 37, 44, 33, 11, 29, 17, 19, 4, 11, 31, 49, 32, 29, 25, 1, 25, 11, 4, 2, 8, 29, 7, 5, 28, 10, 31, 21, 24, 10, 24, 28, 31, 46, 26, 49, 30, 17, 3, 19, 17, 7, 30, 18, 22, 2, 3, 17, 7, 20, 4, 16, 14, 22, 1, 31, 12, 20, 1, 21, 28, 6, 16, 23, 17, 41, 13, 1, 27, 3, 29, 1, 31, 25, 10, 11, 11, 20, 8, 23, 15, 19, 20, 37, 1, 13, 14, 4, 12, 19]
[10, 3, 12, 17, 3, 24, 1, 50, 25, 33, 13, 10, 27, 5, 20, 36, 3, 30, 22, 35, 35, 5, 14, 1, 25, 33, 1, 32, 16, 15, 25, 24, 3, 18, 3, 26, 32, 20, 26, 17, 20, 17, 2, 2, 17, 17, 14, 5, 1]
[26, 28, 27, 30, 7, 18, 14, 23, 13, 8, 2, 5, 24, 19, 3, 20, 24, 17, 34, 22, 30, 16, 9, 42, 14, 7, 21, 20, 4, 18, 3, 14, 31, 34, 9, 8, 28, 33, 9, 12, 29, 35, 19, 23, 20, 20, 34, 22, 51, 23]
[30, 2, 6, 3, 15, 10, 15, 1, 6, 3, 17, 13, 1, 1, 3, 15, 4, 19, 7, 29, 10, 7, 5, 9, 3, 2, 3, 20, 14, 6, 7, 11, 6, 9, 1, 7, 31, 4, 2, 5, 1, 15, 22, 7, 16, 3, 7, 32, 10, 15, 26, 7, 9, 6, 20, 7, 21, 14, 1, 17, 20, 16, 4, 13, 10, 6, 17, 28, 8, 14, 9, 14, 3, 28, 3, 12, 8, 17, 11, 11, 6, 6, 9, 10, 10, 13, 5, 11, 31]
[1, 20, 4, 23, 12, 13, 13, 9, 9, 14, 4, 13, 16, 5, 10, 4, 5, 2, 25, 6, 5, 26, 3, 2, 22, 7, 4, 16, 8, 18, 6, 5, 12, 19, 34, 18, 18, 3, 1, 11, 10, 13, 10, 1, 13]
[6, 1, 4, 5, 3, 5, 1, 6, 2, 2]
[6, 34, 22, 6, 46, 29, 17, 10, 38, 29, 40, 11, 20, 4, 45, 30, 39, 18, 31, 28, 1, 38, 23, 28, 10, 14, 27, 24, 44, 14, 37, 14, 39, 3, 24, 7, 35, 22, 4, 42, 15, 9, 40, 20, 1, 2, 33, 27, 30, 23, 16, 30, 35, 8, 35, 21, 24, 22, 32, 3, 14, 1, 16, 7, 14, 14, 36, 7, 34, 2, 37, 21, 4, 26, 5, 12, 38, 1, 2, 12]
[4, 16, 4, 2, 6, 10, 13, 5, 7, 12, 9, 10, 19, 7, 4, 16, 14, 10, 8, 9, 23, 8, 1, 1, 10, 12, 14, 12, 1, 11, 17, 17, 8, 6, 16, 5, 6, 17, 9, 18, 6, 12, 12, 14, 15, 17, 18, 10, 4, 2, 9, 4, 7, 5, 20, 3, 8, 16, 18, 6, 13, 11, 4, 3, 8, 6, 7, 2, 16, 15, 15, 14, 20, 9, 12, 18, 1, 3, 10, 4, 7, 4, 4, 2, 17, 4, 14, 17, 12, 8, 17, 8]
[22, 21, 1, 1, 14, 32, 25, 15, 24, 18, 20, 15, 12, 2, 24, 16, 17, 38, 18, 23, 25, 22, 23, 16, 30, 11, 5, 24, 22, 3, 18, 9, 14, 2, 22, 8, 8, 13, 1, 16, 5, 12, 7, 17, 7, 2, 12, 22, 18, 14, 3, 4, 2, 17, 1, 11, 3, 15, 4, 2, 6, 5, 26, 18, 3, 25, 10, 18, 20, 22]
[1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 3, 2, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 2, 2, 3, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 2, 1]
[1, 13, 12, 28, 16, 2, 45, 62, 33, 39, 27, 42, 33, 14, 10, 11, 10, 22, 28, 62, 10, 37, 9, 20, 38, 25, 32, 16, 14, 44, 39, 17, 29, 18, 17, 14, 20, 18, 5, 38, 13, 40, 38, 11, 54, 4, 1, 9, 10, 38, 14, 1, 24, 10, 2, 4, 11, 28, 33, 31, 23, 15, 32, 18, 22, 35]
[14, 15, 7, 1, 14, 7, 1, 8, 7, 3, 11, 1, 8, 1, 9, 6, 6, 5, 12, 13, 15, 4, 11, 6, 23, 1, 15, 8, 15, 11, 14, 18, 2, 12, 12, 15, 5, 12, 1, 9, 7, 7, 13, 14, 5, 6, 1, 6, 6, 7, 6, 10, 14, 16, 13, 7, 15]
[16, 8, 10, 12, 16, 12, 19, 6, 10, 14, 12, 4, 3, 5, 23, 6, 13, 1, 15, 9, 12, 1, 7, 4, 10, 7, 2, 1, 17, 1, 24, 6, 15, 4, 19, 1, 9, 1, 14, 16, 20, 13, 9, 1, 8, 2, 10, 16, 10, 14, 9, 16, 14, 2, 25, 15, 3, 8, 16, 3, 9, 5]
[32, 43, 29, 56, 3, 45, 18, 44, 28, 37, 30, 12, 10, 3, 19, 13, 28, 33, 20, 1, 10, 61, 6, 1, 11, 7, 31, 6, 43, 6, 41, 22, 10, 14, 6, 20, 43, 19, 41, 9, 33, 41, 45, 11, 39, 24, 27, 31]
[26, 13, 5, 6, 4, 3, 1, 31, 23, 31, 26, 45, 1]
[20, 31, 12, 4, 29, 50, 9, 1, 29, 20, 7, 29, 22, 10, 23, 32, 14, 34, 24, 12, 26, 1, 32, 5, 27, 10, 31, 5, 45, 6, 11, 3, 15, 31, 5, 8, 23, 29, 30, 1, 11, 26, 14, 8, 4, 32, 11, 26, 29, 27, 14, 23, 5, 27, 32, 12]
[1, 4, 2, 18, 22, 15]
[45, 1, 3, 7, 1, 7, 25, 2, 31, 39, 14, 33, 34, 13, 37, 24, 15, 2, 2, 20, 15, 16, 34, 35, 27, 13, 9, 33, 10, 34, 12, 1, 2, 20, 6, 12, 3, 20, 22, 30, 2, 23, 14, 31, 22, 12, 33, 32, 3, 41, 3, 34, 15, 11, 1, 29, 10, 28, 1, 21, 5, 19, 9, 16, 5, 24, 19, 28, 21, 17, 9, 31]
[4, 1, 27, 10, 4, 20, 3, 15, 27, 23, 6, 7]
[19, 31, 13, 23, 56, 37, 17, 31, 6, 8, 31, 27, 37, 58, 35, 26, 20, 20, 14, 33, 14, 11, 43, 24, 17, 12, 58, 6, 20, 16, 54, 8, 6, 19, 6, 27, 22, 34, 24, 21, 57, 7, 19, 23, 37, 19, 36, 32, 11, 32, 6, 39, 29, 36, 4, 33, 41, 7, 9, 6, 25, 7, 48, 19, 37, 8, 20, 24, 5, 33, 1, 22, 19, 15, 7, 38, 57, 33, 54, 7, 24, 29, 30, 17, 28, 16, 8, 13, 12, 50, 31, 34, 1, 30, 22, 30, 18]
[100, 92, 89, 77, 74, 66, 64, 66, 64]
[64, 66, 64, 66, 74, 77, 89, 92, 100]
*/