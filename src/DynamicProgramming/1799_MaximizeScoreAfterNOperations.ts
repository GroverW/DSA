/*
You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.

In the ith operation (1-indexed), you will:

Choose two elements, x and y.
Receive a score of i * gcd(x, y).
Remove x and y from nums.
Return the maximum score you can receive after performing n operations.

The function gcd(x, y) is the greatest common divisor of x and y.

 

Example 1:

Input: nums = [1,2]
Output: 1
Explanation: The optimal choice of operations is:
(1 * gcd(1, 2)) = 1
Example 2:

Input: nums = [3,4,6,8]
Output: 11
Explanation: The optimal choice of operations is:
(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11
Example 3:

Input: nums = [1,2,3,4,5,6]
Output: 14
Explanation: The optimal choice of operations is:
(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14
 

Constraints:

1 <= n <= 7
nums.length == 2 * n
1 <= nums[i] <= 106
*/

function maxScore(nums: number[]): number {
  const ALL_NUMS: number = nums.reduce((mask, _, i) => mask | 1 << i, 0);
  const gcdPairsTable: number[][] = new Array(nums.length).fill(0)
    .map(() => new Array(nums.length).fill(0));
  const gcdPairs: [number, number, number][] = [];

  for (let i = 0; i < nums.length; i += 1) {
    for (let j = i + 1; j < nums.length; j += 1) {
      const greatestCommonDivisor: number = getGreatestCommonDivisor(nums[i], nums[j]);
      gcdPairsTable[i][j] = greatestCommonDivisor;
      gcdPairsTable[j][i] = greatestCommonDivisor;
      gcdPairs.push([i, j, greatestCommonDivisor]);
    }
  }

  gcdPairs.sort((a, b) => b[2] - a[2]);
  const bestScores: number[] = new Array(2 ** nums.length).fill(0);

  const getBestScore = (score: number, numsRemain: number, level: number): void => {
    if (bestScores[numsRemain] >= score) return;
    bestScores[numsRemain] = score;
    if (!numsRemain) return;

    const nextLevel: number = level + 1;

    for (let i = 0; i < nums.length; i += 1) {
      if (!(numsRemain & 1 << i)) continue;
      for (let j = 0; j < nums.length; j += 1) {
        if (i === j || !(numsRemain & 1 << j)) continue;
        const nextNumsRemain = numsRemain ^ (1 << i) ^ (1 << j);
        const nextScore: number = score + gcdPairsTable[i][j] * nextLevel;
        getBestScore(nextScore, nextNumsRemain, nextLevel)
      }
    }
  }

  for (let [i, j, score] of gcdPairs) {
    const numsRemains: number = ALL_NUMS ^ (1 << i) ^ (1 << j);
    getBestScore(score, numsRemains, 1);
  }

  return bestScores[0];
};

const getGreatestCommonDivisor = (num1: number, num2: number): number => {
  let x: number = Math.max(num1, num2);
  let y: number = Math.min(num1, num2);
  while (true) {
    if (!y) return x;
    x %= y;
    if (!x) return y;
    y %= x;
  }
}

/*

*/

// const maxLen: number = 100;

// for (let i = 0; i < 50; i += 1) {
//   // const len: number = numberBetween(1, maxLen);
//   const len: number = 14;
//   const nums: number[] = new Array(len).fill(0).map(() => numberBetween(1, 50));

//   // logOutList('"' + parenString + '",')
//   // logOutList(printRow([nums, k]) + ',')
//   // logOutList(printRow([s, t]) + ',');
//   // logOutList(numberBetween(1, 100) + ',');
//   logOutList(printRow(nums) + ',');
// }

const tests: any[] = [
  [1, 2],
  [1, 2, 3, 4],
  [1, 2, 3, 4, 5, 6],
  [1, 2, 3, 4, 5, 6, 7, 8],
  [587156, 968317, 796492, 565416, 844300, 299634, 690035, 12345],
  [630617, 464115],
  [634141, 407640, 53315, 727187],
  [377928, 537306, 383433, 833857, 207324, 540473],
  [712058, 293898, 76226, 55414, 915424, 480685, 643326, 904521],
  [646639, 877382, 66631, 311070, 110126, 980895, 378085, 452895, 652208, 608116],
  [334180, 726091, 771507, 176843, 667586, 401825, 645868, 976474, 257650, 867584, 585813, 974844],
  [614185, 362692, 610832, 53768, 104300, 973438, 362869, 721798, 144022, 244973, 690823, 876893, 752410, 93475],
  [44, 16, 19, 49, 27, 8, 38, 24, 50, 28, 16, 16, 25, 35],
  [43, 13, 9, 17, 25, 30, 50, 3, 16, 24, 32, 29, 47, 30],
  [30, 36, 14, 30, 3, 15, 33, 15, 20, 43, 18, 45, 8, 12],
  [5, 49, 32, 40, 34, 29, 21, 27, 15, 16, 29, 27, 11, 28],
  [16, 40, 9, 28, 14, 30, 32, 35, 48, 35, 20, 47, 44, 4],
  [43, 9, 19, 50, 50, 1, 16, 1, 20, 12, 21, 41, 46, 23],
  [41, 8, 44, 10, 32, 47, 15, 4, 35, 29, 25, 23, 3, 14],
  [2, 27, 49, 46, 45, 6, 39, 10, 44, 8, 10, 32, 41, 39],
  [20, 48, 16, 38, 41, 11, 41, 49, 44, 40, 31, 45, 30, 21],
  [26, 37, 26, 18, 13, 9, 21, 9, 49, 40, 7, 15, 39, 26],
  [41, 40, 24, 15, 39, 25, 33, 40, 9, 45, 25, 33, 10, 4],
  [23, 25, 12, 42, 33, 24, 39, 10, 13, 26, 41, 27, 40, 42],
  [47, 16, 17, 7, 4, 9, 32, 13, 49, 16, 35, 40, 6, 23],
  [33, 5, 32, 1, 19, 31, 35, 47, 15, 29, 26, 30, 25, 4],
  [16, 43, 30, 21, 48, 46, 50, 26, 32, 37, 9, 34, 33, 35],
  [35, 50, 42, 7, 17, 32, 46, 42, 25, 45, 1, 33, 28, 10],
  [20, 34, 26, 14, 11, 3, 40, 46, 24, 25, 7, 2, 34, 38],
  [6, 23, 16, 8, 9, 46, 38, 10, 38, 34, 32, 25, 40, 10],
  [13, 16, 28, 21, 38, 42, 3, 3, 41, 8, 36, 6, 42, 15],
  [8, 6, 24, 35, 9, 4, 35, 21, 18, 39, 18, 13, 12, 19],
  [43, 26, 7, 34, 39, 43, 48, 21, 21, 14, 49, 10, 8, 17],
  [6, 31, 42, 45, 41, 24, 8, 9, 6, 46, 6, 3, 35, 32],
  [4, 6, 36, 33, 27, 24, 34, 34, 8, 28, 20, 1, 38, 4],
  [38, 48, 9, 29, 38, 38, 26, 31, 14, 24, 29, 16, 17, 49],
  [17, 5, 40, 14, 16, 16, 44, 37, 49, 27, 16, 28, 16, 13],
  [25, 43, 6, 22, 18, 43, 46, 16, 9, 42, 44, 36, 47, 28],
  [35, 42, 24, 40, 6, 1, 1, 1, 25, 24, 48, 47, 33, 28],
  [39, 31, 39, 15, 4, 11, 23, 46, 16, 49, 13, 47, 24, 7],
  [47, 11, 40, 23, 28, 23, 11, 25, 14, 28, 34, 38, 16, 7],
  [39, 40, 8, 10, 17, 48, 21, 15, 38, 23, 29, 30, 15, 22],
  [40, 16, 13, 17, 42, 40, 43, 11, 14, 13, 35, 4, 31, 4],
  [28, 5, 44, 24, 14, 16, 13, 18, 40, 15, 33, 37, 4, 44],
  [6, 15, 3, 5, 8, 21, 8, 27, 34, 43, 2, 2, 30, 20],
  [23, 50, 30, 31, 25, 12, 4, 49, 39, 40, 46, 1, 11, 42],
  [30, 23, 32, 20, 12, 45, 41, 39, 7, 37, 17, 5, 32, 16],
  [19, 43, 3, 18, 30, 4, 42, 48, 44, 7, 13, 12, 31, 35],
  [46, 25, 12, 23, 5, 16, 2, 44, 38, 37, 49, 44, 1, 48],
  [34, 13, 25, 38, 49, 17, 21, 47, 21, 37, 16, 10, 35, 48],
  [15, 36, 33, 26, 12, 19, 22, 21, 14, 10, 16, 7, 4, 13],
  [48, 39, 40, 23, 10, 12, 40, 2, 40, 46, 13, 44, 5, 32],
  [49, 8, 46, 14, 12, 42, 19, 26, 25, 38, 42, 48, 49, 14],
  [29, 21, 48, 44, 16, 26, 44, 44, 6, 30, 50, 5, 48, 32],
  [42, 50, 35, 47, 3, 32, 41, 5, 17, 10, 21, 31, 30, 18],
  [22, 7, 19, 4, 42, 38, 7, 46, 30, 40, 46, 33, 47, 39],
  [17, 24, 33, 49, 7, 3, 17, 7, 50, 9, 12, 27, 6, 19],
  [22, 23, 37, 11, 3, 23, 11, 38, 10, 31, 18, 32, 43, 37],
  [24, 50, 16, 11, 47, 43, 23, 33, 14, 31, 17, 38, 32, 44],
  [43, 33, 5, 15, 43, 49, 19, 46, 20, 17, 24, 24, 15, 16],
  [48, 33, 5, 10, 38, 2, 49, 7, 42, 49, 48, 17, 19, 36],
  [35, 42, 40, 46, 3, 34, 10, 9, 2, 35, 50, 30, 24, 45],
];



let i: number = 0;
for (let test of tests) {
  console.time(i.toString());
  logOutList(maxScore(test));
  console.timeEnd(i.toString());
  i += 1;
}

/*
[1, 2]
[1, 2, 3, 4]
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6, 7, 8]
[587156, 968317, 796492, 565416, 844300, 299634, 690035, 12345]
[630617, 464115]
[634141, 407640, 53315, 727187]
[377928, 537306, 383433, 833857, 207324, 540473]
[712058, 293898, 76226, 55414, 915424, 480685, 643326, 904521]
[646639, 877382, 66631, 311070, 110126, 980895, 378085, 452895, 652208, 608116]
[334180, 726091, 771507, 176843, 667586, 401825, 645868, 976474, 257650, 867584, 585813, 974844]
[614185, 362692, 610832, 53768, 104300, 973438, 362869, 721798, 144022, 244973, 690823, 876893, 752410, 93475]
[44, 16, 19, 49, 27, 8, 38, 24, 50, 28, 16, 16, 25, 35]
[43, 13, 9, 17, 25, 30, 50, 3, 16, 24, 32, 29, 47, 30]
[30, 36, 14, 30, 3, 15, 33, 15, 20, 43, 18, 45, 8, 12]
[5, 49, 32, 40, 34, 29, 21, 27, 15, 16, 29, 27, 11, 28]
[16, 40, 9, 28, 14, 30, 32, 35, 48, 35, 20, 47, 44, 4]
[43, 9, 19, 50, 50, 1, 16, 1, 20, 12, 21, 41, 46, 23]
[41, 8, 44, 10, 32, 47, 15, 4, 35, 29, 25, 23, 3, 14]
[2, 27, 49, 46, 45, 6, 39, 10, 44, 8, 10, 32, 41, 39]
[20, 48, 16, 38, 41, 11, 41, 49, 44, 40, 31, 45, 30, 21]
[26, 37, 26, 18, 13, 9, 21, 9, 49, 40, 7, 15, 39, 26]
[41, 40, 24, 15, 39, 25, 33, 40, 9, 45, 25, 33, 10, 4]
[23, 25, 12, 42, 33, 24, 39, 10, 13, 26, 41, 27, 40, 42]
[47, 16, 17, 7, 4, 9, 32, 13, 49, 16, 35, 40, 6, 23]
[33, 5, 32, 1, 19, 31, 35, 47, 15, 29, 26, 30, 25, 4]
[16, 43, 30, 21, 48, 46, 50, 26, 32, 37, 9, 34, 33, 35]
[35, 50, 42, 7, 17, 32, 46, 42, 25, 45, 1, 33, 28, 10]
[20, 34, 26, 14, 11, 3, 40, 46, 24, 25, 7, 2, 34, 38]
[6, 23, 16, 8, 9, 46, 38, 10, 38, 34, 32, 25, 40, 10]
[13, 16, 28, 21, 38, 42, 3, 3, 41, 8, 36, 6, 42, 15]
[8, 6, 24, 35, 9, 4, 35, 21, 18, 39, 18, 13, 12, 19]
[43, 26, 7, 34, 39, 43, 48, 21, 21, 14, 49, 10, 8, 17]
[6, 31, 42, 45, 41, 24, 8, 9, 6, 46, 6, 3, 35, 32]
[4, 6, 36, 33, 27, 24, 34, 34, 8, 28, 20, 1, 38, 4]
[38, 48, 9, 29, 38, 38, 26, 31, 14, 24, 29, 16, 17, 49]
[17, 5, 40, 14, 16, 16, 44, 37, 49, 27, 16, 28, 16, 13]
[25, 43, 6, 22, 18, 43, 46, 16, 9, 42, 44, 36, 47, 28]
[35, 42, 24, 40, 6, 1, 1, 1, 25, 24, 48, 47, 33, 28]
[39, 31, 39, 15, 4, 11, 23, 46, 16, 49, 13, 47, 24, 7]
[47, 11, 40, 23, 28, 23, 11, 25, 14, 28, 34, 38, 16, 7]
[39, 40, 8, 10, 17, 48, 21, 15, 38, 23, 29, 30, 15, 22]
[40, 16, 13, 17, 42, 40, 43, 11, 14, 13, 35, 4, 31, 4]
[28, 5, 44, 24, 14, 16, 13, 18, 40, 15, 33, 37, 4, 44]
[6, 15, 3, 5, 8, 21, 8, 27, 34, 43, 2, 2, 30, 20]
[23, 50, 30, 31, 25, 12, 4, 49, 39, 40, 46, 1, 11, 42]
[30, 23, 32, 20, 12, 45, 41, 39, 7, 37, 17, 5, 32, 16]
[19, 43, 3, 18, 30, 4, 42, 48, 44, 7, 13, 12, 31, 35]
[46, 25, 12, 23, 5, 16, 2, 44, 38, 37, 49, 44, 1, 48]
[34, 13, 25, 38, 49, 17, 21, 47, 21, 37, 16, 10, 35, 48]
[15, 36, 33, 26, 12, 19, 22, 21, 14, 10, 16, 7, 4, 13]
[48, 39, 40, 23, 10, 12, 40, 2, 40, 46, 13, 44, 5, 32]
[49, 8, 46, 14, 12, 42, 19, 26, 25, 38, 42, 48, 49, 14]
[29, 21, 48, 44, 16, 26, 44, 44, 6, 30, 50, 5, 48, 32]
[42, 50, 35, 47, 3, 32, 41, 5, 17, 10, 21, 31, 30, 18]
[22, 7, 19, 4, 42, 38, 7, 46, 30, 40, 46, 33, 47, 39]
[17, 24, 33, 49, 7, 3, 17, 7, 50, 9, 12, 27, 6, 19]
[22, 23, 37, 11, 3, 23, 11, 38, 10, 31, 18, 32, 43, 37]
[24, 50, 16, 11, 47, 43, 23, 33, 14, 31, 17, 38, 32, 44]
[43, 33, 5, 15, 43, 49, 19, 46, 20, 17, 24, 24, 15, 16]
[48, 33, 5, 10, 38, 2, 49, 7, 42, 49, 48, 17, 19, 36]
[35, 42, 40, 46, 3, 34, 10, 9, 2, 35, 50, 30, 24, 45]
*/