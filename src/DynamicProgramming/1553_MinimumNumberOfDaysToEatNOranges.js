/*
There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:

Eat one orange.
If the number of remaining oranges (n) is divisible by 2 then you can eat  n/2 oranges.
If the number of remaining oranges (n) is divisible by 3 then you can eat  2*(n/3) oranges.
You can only choose one of the actions per day.

Return the minimum number of days to eat n oranges.

 

Example 1:

Input: n = 10
Output: 4
Explanation: You have 10 oranges.
Day 1: Eat 1 orange,  10 - 1 = 9.  
Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)
Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. 
Day 4: Eat the last orange  1 - 1  = 0.
You need at least 4 days to eat the 10 oranges.
Example 2:

Input: n = 6
Output: 3
Explanation: You have 6 oranges.
Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).
Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)
Day 3: Eat the last orange  1 - 1  = 0.
You need at least 3 days to eat the 6 oranges.
Example 3:

Input: n = 1
Output: 1
Example 4:

Input: n = 56
Output: 6
 

Constraints:

1 <= n <= 2*10^9
*/

var minDays = function (n, fewestDays = {}) {
  if (n <= 3) return 1 + (n > 1);

  if (!fewestDays[n]) {
    const extraDaysBy2 = n % 2;
    const extraDaysBy3 = n % 3;

    fewestDays[n] = 1 + Math.min(
      extraDaysBy2 + minDays(Math.floor(n / 2), fewestDays),
      extraDaysBy3 + minDays(Math.floor(n / 3), fewestDays),
    );
  }

  return fewestDays[n];
};


// let cap = 100;
// for (let i = 0; i < 8; i += 1) {
//   for (let j = 0; j < 25; j += 1) {
//     logOutList(Math.floor(Math.random() * cap) + ',');
//   }
//   cap *= 10;
// }

/*

*/

const tests = [
  10,
  6,
  1,
  56,
  10000000,
  100000000,
  281973128,
  1291837234,
  19,
  80,
  73,
  54,
  32,
  48,
  19,
  60,
  14,
  77,
  53,
  85,
  32,
  77,
  52,
  6,
  19,
  14,
  10,
  35,
  38,
  29,
  10,
  19,
  602,
  533,
  660,
  776,
  487,
  643,
  256,
  214,
  956,
  990,
  884,
  128,
  595,
  533,
  847,
  797,
  371,
  966,
  850,
  801,
  499,
  728,
  173,
  663,
  121,
  5966,
  1227,
  4663,
  1748,
  3221,
  9210,
  3259,
  1091,
  6660,
  2846,
  3238,
  7509,
  5920,
  9724,
  1950,
  3450,
  9734,
  623,
  3120,
  626,
  8263,
  2033,
  677,
  351,
  237,
  87257,
  2670,
  97500,
  33439,
  60184,
  51997,
  16260,
  75155,
  47186,
  26578,
  35495,
  86708,
  38483,
  52143,
  76310,
  29062,
  59204,
  9231,
  74110,
  54584,
  83672,
  59271,
  48074,
  35179,
  99879,
  265913,
  149076,
  590506,
  524151,
  556140,
  309017,
  353882,
  677028,
  395084,
  625766,
  918873,
  462829,
  515102,
  521621,
  163464,
  410497,
  819215,
  633209,
  246241,
  392543,
  401903,
  996338,
  398570,
  7927,
  651366,
  5817629,
  688640,
  4402837,
  2722995,
  1580781,
  3238460,
  5086569,
  5911907,
  2870781,
  9401728,
  631439,
  4936291,
  5569535,
  6095400,
  3684989,
  889336,
  9151446,
  6019292,
  1375176,
  4471359,
  8890372,
  1755292,
  4042688,
  5674165,
  8773927,
  99704558,
  44961254,
  86852160,
  16633743,
  23767421,
  66146215,
  85878471,
  35648276,
  16649242,
  51859664,
  31821036,
  42241665,
  73738521,
  49751278,
  22762059,
  47540727,
  27272606,
  82317458,
  33980020,
  80729213,
  46518456,
  18193585,
  81935745,
  3319370,
  10586020,
  653665626,
  224614682,
  979165243,
  858032595,
  391817005,
  518461612,
  986791981,
  643564684,
  662810199,
  701039998,
  403384267,
  737998653,
  510880273,
  469643387,
  875304473,
  395206688,
  189847077,
  451977797,
  35599865,
  819462855,
  211984507,
  402463972,
  888227307,
  138414937,
  869608297,
];

for (let test of tests) {
  console.time(test.toString());
  logOutList(minDays(test));
  console.timeEnd(test.toString());
}

/*
10
6
1
56
10000000
100000000
281973128
1291837234
19
80
73
54
32
48
19
60
14
77
53
85
32
77
52
6
19
14
10
35
38
29
10
19
602
533
660
776
487
643
256
214
956
990
884
128
595
533
847
797
371
966
850
801
499
728
173
663
121
5966
1227
4663
1748
3221
9210
3259
1091
6660
2846
3238
7509
5920
9724
1950
3450
9734
623
3120
626
8263
2033
677
351
237
87257
2670
97500
33439
60184
51997
16260
75155
47186
26578
35495
86708
38483
52143
76310
29062
59204
9231
74110
54584
83672
59271
48074
35179
99879
265913
149076
590506
524151
556140
309017
353882
677028
395084
625766
918873
462829
515102
521621
163464
410497
819215
633209
246241
392543
401903
996338
398570
7927
651366
5817629
688640
4402837
2722995
1580781
3238460
5086569
5911907
2870781
9401728
631439
4936291
5569535
6095400
3684989
889336
9151446
6019292
1375176
4471359
8890372
1755292
4042688
5674165
8773927
99704558
44961254
86852160
16633743
23767421
66146215
85878471
35648276
16649242
51859664
31821036
42241665
73738521
49751278
22762059
47540727
27272606
82317458
33980020
80729213
46518456
18193585
81935745
3319370
10586020
653665626
224614682
979165243
858032595
391817005
518461612
986791981
643564684
662810199
701039998
403384267
737998653
510880273
469643387
875304473
395206688
189847077
451977797
35599865
819462855
211984507
402463972
888227307
138414937
869608297
*/