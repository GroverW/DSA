/*
A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:
Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".
Example 2:
Input: "1*"
Output: 9 + 9 = 18
Note:
The length of the input string will fit in range [1, 105].
The input string will only contain the character '*' and digits '0' - '9'.
*/

var numDecodings = function (s) {
  if (s[0] === '0') return 0;

  let lastTotal = s[0] === '*' ? 9 : 1;
  let prevTotal = 1;
  let nextTotal = 0;

  for (let i = 1; i < s.length; i += 1) {
    if (s[i] === '*') {
      nextTotal = lastTotal * 9;
      if (s[i - 1] === '*') {
        nextTotal += prevTotal * 15;
      } else if (s[i - 1] === '2') {
        nextTotal += prevTotal * 6;
      } else if (s[i - 1] === '1') {
        nextTotal += prevTotal * 9;
      }
    } else if (s[i] === '0') {
      if (s[i - 1] === '*') {
        nextTotal = prevTotal * 2;
      } else if (
        s[i - 1] === '1'
        || s[i - 1] === '2'
      ) {
        nextTotal = prevTotal;
      } else {
        return 0;
      }
    } else {
      if (s[i - 1] === '*') {
        nextTotal = lastTotal + prevTotal;
        if (s[i] <= '6') nextTotal += prevTotal;
      } else if (
        s[i - 1] === '1'
        || (s[i - 1] === '2' && s[i] <= '6')) {
        nextTotal = lastTotal + prevTotal;
      } else {
        nextTotal = lastTotal;
      }
    }

    prevTotal = lastTotal;
    lastTotal = nextTotal;
  }

  return lastTotal % (10 ** 9 + 7);
};

// const maxLen = 100;
// const options = '0123456789*'
// for (let i = 0; i < 50; i += 1) {
//   const len = Math.floor(Math.random() * maxLen) + 1;

//   let encoded = '';
//   for (let i = 0; i < len; i += 1) {
//     const idx = (encoded[i - 1] >= '3' || encoded[i - 1] === '0')
//       ? Math.floor(Math.random() * (options.length - 1)) + 1
//       : Math.floor(Math.random() * options.length);
//     encoded += options[idx];
//   }
//   logOutList('"' + encoded + '",')
// }

const tests = [
  "1*",
  "12*3322*13*28*34*7293*8478*32",
  "*",
  "326*37433983975331*3*038625*87262949",
  "17442712775*1915538966964424978639835*7317374*0918*0",
  "529934793741315518225661**8678489*6655*071327175828421",
  "0726725*98*13911208*656535*7",
  "01020944220783513204*5",
  "858787269614346*06*1091481857797*7826339237667738274**84*6*42425*762684253566885*845295466",
  "3415*9322",
  "0145815219881205683698334938678**95386*48",
  "454178648687844455844519298778949877478694*386867832107*92*614198642353206",
  "49438*9206933*522*26*0815*378*766997185314237*3*53579176784358468559412*5*8*5*09794*5",
  "48354783*663122323*7*5766811581552852939**8151628*18",
  "6*973939453581384875*01*2362734954154989",
  "0102653*4*157574873416541616*46196946685246775*479*8469335*5278681513457777446361*1353",
  "34178*7544*392031102192515343912*32963898*7962682981131318*26*2*",
  "3784418759621586636",
  "64951*97443885586",
  "2*",
  "43992253933765*99159",
  "82610*6*469545*784949228586*297628568264*75125",
  "*653913934*85392117714939***9",
  "9643561942717*6",
  "6*3*487558781342125*79*8732673241256456441**8282491863937132776142*7339396*5",
  "86866662395818323353*22063*3986*922*896312*",
  "*28344935**153",
  "196332433*67532874995826993418**51620682735571423671984*63419541576",
  "**44329",
  "99*5920*079577769743663*2493196596536984",
  "315235661*02578223664343*79*42*64963202416871449499*76681558986*15*242**43736*",
  "7699645395*357810388632*8*",
  "7*4375376813632*83",
  "3154120839194381263108973329159294811021",
  "713810",
  "5626*2538183*52793365597654118731957569518673*764996519881588*291*03443379**3749353",
  "1322422585227345*997205*2467*733953320523*73511134861*64972*544687*864345232",
  "8*3*077124482067*1046977*476",
  "8269858798*387**026155465595988*814895415*10*7*6*74687*562",
  "4796674",
  "655485314426866",
  "21838787738*7*7*916*891172886559442138196412591**775119449*046266",
  "*7*66320457*0182298*058239832424467",
  "4784938674654812092*076*43569841861210166255671634263735*31692453171*545445*3216*29553416",
  "6888*0249954468*8*9",
  "82*1045*3*472067916*73175516*53483462613774*17*1853",
  "425*844352338*38",
  "6*03874*75994446*5*18*2*3268*732",
  "*1067*",
  "07975853787995394771472043696*6221445*627",
  "7",
  "21266828782***2*20*619668815434998208678966982637282671051884552795565166220*472235*76391",
  "377939152798341816",
];

let i = 0;
for (let test of tests) {
  console.time(i);
  logOutList(numDecodings(test));
  console.timeEnd(i);
  i += 1;
}

/*
"1*"
"12*3322*13*28*34*7293*8478*32"
"*"
"326*37433983975331*3*038625*87262949"
"17442712775*1915538966964424978639835*7317374*0918*0"
"529934793741315518225661**8678489*6655*071327175828421"
"0726725*98*13911208*656535*7"
"01020944220783513204*5"
"858787269614346*06*1091481857797*7826339237667738274**84*6*42425*762684253566885*845295466"
"3415*9322"
"0145815219881205683698334938678**95386*48"
"454178648687844455844519298778949877478694*386867832107*92*614198642353206"
"49438*9206933*522*26*0815*378*766997185314237*3*53579176784358468559412*5*8*5*09794*5"
"48354783*663122323*7*5766811581552852939**8151628*18"
"6*973939453581384875*01*2362734954154989"
"0102653*4*157574873416541616*46196946685246775*479*8469335*5278681513457777446361*1353"
"34178*7544*392031102192515343912*32963898*7962682981131318*26*2*"
"3784418759621586636"
"64951*97443885586"
"2*"
"43992253933765*99159"
"82610*6*469545*784949228586*297628568264*75125"
"*653913934*85392117714939***9"
"9643561942717*6"
"6*3*487558781342125*79*8732673241256456441**8282491863937132776142*7339396*5"
"86866662395818323353*22063*3986*922*896312*"
"*28344935**153"
"196332433*67532874995826993418**51620682735571423671984*63419541576"
"**44329"
"99*5920*079577769743663*2493196596536984"
"315235661*02578223664343*79*42*64963202416871449499*76681558986*15*242**43736*"
"7699645395*357810388632*8*"
"7*4375376813632*83"
"3154120839194381263108973329159294811021"
"713810"
"5626*2538183*52793365597654118731957569518673*764996519881588*291*03443379**3749353"
"1322422585227345*997205*2467*733953320523*73511134861*64972*544687*864345232"
"8*3*077124482067*1046977*476"
"8269858798*387**026155465595988*814895415*10*7*6*74687*562"
"4796674"
"655485314426866"
"21838787738*7*7*916*891172886559442138196412591**775119449*046266"
"*7*66320457*0182298*058239832424467"
"4784938674654812092*076*43569841861210166255671634263735*31692453171*545445*3216*29553416"
"6888*0249954468*8*9"
"82*1045*3*472067916*73175516*53483462613774*17*1853"
"425*844352338*38"
"6*03874*75994446*5*18*2*3268*732"
"*1067*"
"07975853787995394771472043696*6221445*627"
"7"
"21266828782***2*20*619668815434998208678966982637282671051884552795565166220*472235*76391"
"377939152798341816"
*/