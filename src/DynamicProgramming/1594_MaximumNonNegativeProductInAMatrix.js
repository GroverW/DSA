/*
You are given a rows x cols matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.

Among all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (rows - 1, cols - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.

Return the maximum non-negative product modulo 109 + 7. If the maximum product is negative return -1.

Notice that the modulo is performed after getting the maximum product.



Example 1:

Input: grid = [[-1,-2,-3],
               [-2,-3,-3],
               [-3,-3,-2]]
Output: -1
Explanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.
Example 2:

Input: grid = [[1,-2,1],
               [1,-2,1],
               [3,-4,1]]
Output: 8
Explanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).
Example 3:

Input: grid = [[1, 3],
               [0,-4]]
Output: 0
Explanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).
Example 4:

Input: grid = [[ 1, 4,4,0],
               [-2, 0,0,1],
               [ 1,-1,1,1]]
Output: 2
Explanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).


Constraints:

1 <= rows, cols <= 15
-4 <= grid[i][j] <= 4
*/

var maxProductPath = function (grid) {
  const lastRow = grid.length - 1;
  const lastCol = grid[0].length - 1;
  const maxPath = new Array(grid.length).fill(null)
    .map(() => new Array(grid[0].length).fill(0));
  const minPath = new Array(grid.length).fill(null)
    .map(() => new Array(grid[0].length).fill(0));

  maxPath[0][0] = grid[0][0];
  minPath[0][0] = grid[0][0];
  for (let r = 1; r <= lastRow; r += 1) {
    maxPath[r][0] = grid[r][0] * maxPath[r - 1][0];
    minPath[r][0] = grid[r][0] * minPath[r - 1][0];
  }
  for (let c = 1; c <= lastCol; c += 1) {
    maxPath[0][c] = grid[0][c] * maxPath[0][c - 1];
    minPath[0][c] = grid[0][c] * minPath[0][c - 1];
  }

  for (let r = 1; r <= lastRow; r += 1) {
    for (let c = 1; c <= lastCol; c += 1) {
      const currentVal = grid[r][c];
      const prod1 = currentVal * maxPath[r - 1][c];
      const prod2 = currentVal * maxPath[r][c - 1];
      const prod3 = currentVal * minPath[r - 1][c];
      const prod4 = currentVal * minPath[r][c - 1];
      maxPath[r][c] = Math.max(prod1, prod2, prod3, prod4);
      minPath[r][c] = Math.min(prod1, prod2, prod3, prod4);
    }
  }
  const max = maxPath[lastRow][lastCol] % (10 ** 9 + 7);
  return Math.max(-1, max);
};

const tests = [
  [
    [-1, -2, -3],
    [-2, -3, -3],
    [-3, -3, -2]
  ],
  [
    [1, -2, 1],
    [1, -2, 1],
    [3, -4, 1]
  ],
  [
    [1, 3],
    [0, -4]
  ],
  [
    [1, 4, 4, 0],
    [-2, 0, 0, 1],
    [1, -1, 1, 1]
  ],
  [
    [-4, 0, 1, 4, 1, 3, -3, 3, -3, 3, -2],
    [3, -4, -4, -1, -3, -4, -4, 1, 1, -1, 1],
    [0, -3, -1, -3, 0, -3, 1, -2, 1, -4, -1],
    [-1, 0, -3, 2, 4, 3, 3, -1, -3, 1, 4],
    [2, 0, 0, -1, 4, 4, -2, 0, 3, -4, 3],
    [-1, 4, 4, -4, -2, -1, 0, 0, -1, 4, 3],
    [2, 1, 0, 4, -1, 0, 1, 0, -3, 4, -2],
    [3, 0, -4, 1, -1, -3, -2, 0, -4, 0, 4]
  ],
  [
    [-4, -2, -2, 0, -2, -3, 4, 2, 3, 1, 4, -2, 4],
    [0, -1, 1, 2, -1, -2, -1, 0, 0, 1, 2, -1, 1],
    [0, 4, 2, 1, 2, 1, -3, -4, 0, -3, -1, 3, -3],
    [2, -2, 1, 0, 4, -4, 1, 0, 2, -3, 3, 3, -1],
    [-3, 4, 1, 2, 1, -4, 4, -3, -2, 1, 0, -3, 1],
    [0, 2, 0, 3, -1, 0, 4, -3, -1, 4, 1, 3, 1],
    [1, 1, -3, 3, 3, 1, 0, -1, 1, 3, 2, 1, -4],
    [0, 3, -3, -1, 3, 2, -4, -4, -1, -3, 2, 2, 0],
    [-3, -2, 1, -4, -2, 2, 4, 3, -2, 1, -2, -3, 1],
    [2, 0, 4, 3, 2, -3, 3, -2, -2, -1, -1, 0, -3],
    [-4, -2, -1, -1, -1, 0, 3, -4, 3, -2, -3, -1, 3]
  ],
  [
    [1, -3, -1, 1, -2, -1, -4, -4, -2, 3, -4, -4, 3, -2, 1],
    [-2, -3, -1, 2, 2, 1, 3, 4, 4, 0, -4, -4, 2, -4, -2],
    [1, 0, 4, 0, -2, 0, -3, 3, -4, 4, -1, 3, 2, -2, 3],
    [-3, 2, 3, 3, -3, -2, 4, 2, 3, 1, 4, -4, 0, -3, 3],
    [-4, 2, -3, -1, -3, -4, 4, 4, -3, 0, -1, 0, -2, -2, -4],
    [-4, 1, 1, 4, -1, -1, 3, 1, 3, 2, -1, 0, -3, 2, -3],
    [2, 4, -1, -3, -3, -4, 1, 0, -3, 1, 0, 4, 4, 1, -3],
    [-2, 0, 2, 1, -1, 0, -4, 1, 2, 1, 1, -1, 0, -3, 3],
    [-4, -2, 1, 0, -3, -2, 2, -3, -2, -3, 2, 3, -2, -3, 2],
    [3, 1, 0, -3, 1, -3, -4, -4, -1, 0, -1, 4, -3, -1, 3],
    [0, -4, 3, -4, 0, 1, -1, -2, -3, 1, 1, -1, 2, -1, 4]
  ],
  [
    [-4, -3],
    [-2, 1],
    [2, 4],
    [1, -3],
    [-3, -1],
    [3, -1],
    [3, -3]
  ],
  [
    [-4],
    [-4],
    [3],
    [2],
    [-3],
    [-3],
    [4],
    [2],
    [-1],
    [2]
  ],
  [
    [3, 2, 1, -1],
    [-2, 4, 0, -2],
    [-1, 2, 1, 2],
    [-4, 2, 4, 2],
    [-1, -3, -1, 4],
    [3, -1, 3, -4],
    [-4, -2, 3, 1]
  ],
  [
    [-3, 0, -2, -3, -1, -1, 4, 3, -3, -1, -1, -1],
    [3, 0, 1, 4, -2, -1, 3, 4, 4, -3, -2, -4],
    [-1, -4, 2, -3, 2, 2, 1, 4, -2, -4, -1, 3],
    [2, 1, -3, -4, -2, 4, -1, 2, 1, 4, 0, -3],
    [2, 2, -3, 4, 1, 2, 4, 1, 1, -2, -1, 0],
    [4, 2, 2, -1, -2, 3, 0, -4, 4, 1, -2, -3],
    [-3, -2, 0, 1, 4, 0, 3, 2, 0, 3, -3, 2],
    [-3, -4, -2, 4, -4, -3, 2, 2, -4, -4, 3, 1],
    [0, 3, -1, 0, 3, -2, -4, 0, -4, -2, -2, 2]
  ],
  [
    [1, 1, 3, -1, -2, -4, 0, 0, -3, 1],
    [-4, 2, -1, 2, -4, 0, 3, 4, 3, 1],
    [4, -1, 0, 0, 2, 1, -4, -3, -3, 4],
    [4, 3, 3, -4, 2, -2, 1, 2, -3, -4],
    [-1, -1, -2, -4, 2, 3, -2, -4, 0, -1],
    [2, -2, -3, 4, -1, -1, 0, -3, -3, -3],
    [-2, 1, 4, 0, 1, 3, 1, -2, 1, -3],
    [4, -2, 4, 1, -2, 3, -2, 1, -3, -4],
    [-1, 1, 1, -4, 2, -3, 3, -4, 3, -4],
    [0, -3, -3, -3, 0, 0, 1, 1, -4, -4],
    [2, 2, -2, -1, 3, 0, -2, -1, 4, -1],
    [0, 3, -3, 3, 4, -4, -3, 0, 4, -2]
  ],
  [
    [2, -2, -2, -3, 3, 4, -1, 0, 3, -4, -1, 4, -3],
    [-2, -2, 1, -1, 1, -4, -4, 1, -4, -4, 2, 3, 0],
    [-4, 0, 2, 3, 1, -2, -2, 1, 4, -2, 2, -1, -3],
    [2, 2, -3, 4, -4, 1, 2, 0, -4, 3, 2, -2, 0],
    [0, 0, 3, -2, 1, -4, 4, -4, 3, 1, 0, -2, 4],
    [-1, 4, 0, 2, 3, 2, 0, 1, 2, 2, 1, 4, 4],
    [-2, -3, -2, -4, 0, 3, 0, -3, -3, 1, -3, 4, -3],
    [-2, -2, 4, 3, -3, -2, -4, 1, -1, -4, 2, -1, 0],
    [-3, -2, -3, -1, -1, -2, 4, 4, 4, 4, 3, 2, 1],
    [-3, 3, 2, -4, -4, 0, 0, 3, -2, -1, 3, -3, 2],
    [1, -4, 2, 1, -1, -3, 1, 0, 3, 1, 2, 2, 4],
    [-2, -2, 3, 3, 3, 3, 3, -3, -1, -2, 0, -1, 2]
  ],
  [
    [-3, 0, -3, 3, 3, -3, -2, 3, -4, 0, 3, 3, -3, 4],
    [2, -1, 1, 1, -2, 1, 2, -1, 4, -2, -3, 3, -3, -3],
    [4, 3, 3, 4, 3, 1, 3, 4, -1, 4, 3, -1, -4, -3],
    [-3, 0, 0, -4, 4, -2, -3, -1, 4, 2, 3, -4, -2, -2],
    [-4, 0, -1, 3, -3, -1, 3, 0, -4, 3, -2, 2, 3, -3],
    [-2, 4, -4, 2, 4, 0, 1, -3, 3, 3, -2, 3, 4, 0],
    [-3, -3, -3, 4, -3, 1, 4, -2, -1, 4, 1, 0, 4, 2],
    [1, 4, 2, -3, 3, 2, -2, 1, -1, -1, -1, -3, 4, -4],
    [4, -1, 4, 4, -2, 2, -2, 4, -3, 2, 0, -4, 0, -2],
    [-3, 2, -2, 2, -4, 0, 2, -4, 2, 2, -4, -1, 2, -4],
    [-3, -2, 4, -3, 3, 1, -3, 1, 1, 0, -2, 4, -3, -2],
    [-3, 1, 0, -2, -4, -2, 2, 0, -3, -3, -2, -4, 3, 0]
  ]
]

// for (let i = 0; i < 10; i += 1) {
//   const numRows = Math.floor(Math.random() * 15) + 1;
//   const numCols = Math.floor(Math.random() * 15) + 1;

//   const arr = new Array(numRows).fill(null).map(() => new Array(numCols).fill());
//   logOutList(printGrid(
//     arr.map((row) => row.map(() => Math.floor(Math.random() * 9) - 4)),
//   ))
// }

for (let test of tests) {
  logOutList(maxProductPath(test));
}

/*
[[-1, -2, -3],[-2, -3, -3],[-3, -3, -2]]
[[1, -2, 1],[1, -2, 1],[3, -4, 1]]
[[1, 3],[0, -4]]
[[1, 4, 4, 0],[-2, 0, 0, 1],[1, -1, 1, 1]]
[[-4, 0, 1, 4, 1, 3, -3, 3, -3, 3, -2],[3, -4, -4, -1, -3, -4, -4, 1, 1, -1, 1],[0, -3, -1, -3, 0, -3, 1, -2, 1, -4, -1],[-1, 0, -3, 2, 4, 3, 3, -1, -3, 1, 4],[2, 0, 0, -1, 4, 4, -2, 0, 3, -4, 3],[-1, 4, 4, -4, -2, -1, 0, 0, -1, 4, 3],[2, 1, 0, 4, -1, 0, 1, 0, -3, 4, -2],[3, 0, -4, 1, -1, -3, -2, 0, -4, 0, 4]]
[[-4, -2, -2, 0, -2, -3, 4, 2, 3, 1, 4, -2, 4],[0, -1, 1, 2, -1, -2, -1, 0, 0, 1, 2, -1, 1],[0, 4, 2, 1, 2, 1, -3, -4, 0, -3, -1, 3, -3],[2, -2, 1, 0, 4, -4, 1, 0, 2, -3, 3, 3, -1],[-3, 4, 1, 2, 1, -4, 4, -3, -2, 1, 0, -3, 1],[0, 2, 0, 3, -1, 0, 4, -3, -1, 4, 1, 3, 1],[1, 1, -3, 3, 3, 1, 0, -1, 1, 3, 2, 1, -4],[0, 3, -3, -1, 3, 2, -4, -4, -1, -3, 2, 2, 0],[-3, -2, 1, -4, -2, 2, 4, 3, -2, 1, -2, -3, 1],[2, 0, 4, 3, 2, -3, 3, -2, -2, -1, -1, 0, -3],[-4, -2, -1, -1, -1, 0, 3, -4, 3, -2, -3, -1, 3]]
[[1, -3, -1, 1, -2, -1, -4, -4, -2, 3, -4, -4, 3, -2, 1],[-2, -3, -1, 2, 2, 1, 3, 4, 4, 0, -4, -4, 2, -4, -2],[1, 0, 4, 0, -2, 0, -3, 3, -4, 4, -1, 3, 2, -2, 3],[-3, 2, 3, 3, -3, -2, 4, 2, 3, 1, 4, -4, 0, -3, 3],[-4, 2, -3, -1, -3, -4, 4, 4, -3, 0, -1, 0, -2, -2, -4],[-4, 1, 1, 4, -1, -1, 3, 1, 3, 2, -1, 0, -3, 2, -3],[2, 4, -1, -3, -3, -4, 1, 0, -3, 1, 0, 4, 4, 1, -3],[-2, 0, 2, 1, -1, 0, -4, 1, 2, 1, 1, -1, 0, -3, 3],[-4, -2, 1, 0, -3, -2, 2, -3, -2, -3, 2, 3, -2, -3, 2],[3, 1, 0, -3, 1, -3, -4, -4, -1, 0, -1, 4, -3, -1, 3],[0, -4, 3, -4, 0, 1, -1, -2, -3, 1, 1, -1, 2, -1, 4]]
[[-4, -3],[-2, 1],[2, 4],[1, -3],[-3, -1],[3, -1],[3, -3]]
[[-4],[-4],[3],[2],[-3],[-3],[4],[2],[-1],[2]]
[[3, 2, 1, -1],[-2, 4, 0, -2],[-1, 2, 1, 2],[-4, 2, 4, 2],[-1, -3, -1, 4],[3, -1, 3, -4],[-4, -2, 3, 1]]
[[-3, 0, -2, -3, -1, -1, 4, 3, -3, -1, -1, -1],[3, 0, 1, 4, -2, -1, 3, 4, 4, -3, -2, -4],[-1, -4, 2, -3, 2, 2, 1, 4, -2, -4, -1, 3],[2, 1, -3, -4, -2, 4, -1, 2, 1, 4, 0, -3],[2, 2, -3, 4, 1, 2, 4, 1, 1, -2, -1, 0],[4, 2, 2, -1, -2, 3, 0, -4, 4, 1, -2, -3],[-3, -2, 0, 1, 4, 0, 3, 2, 0, 3, -3, 2],[-3, -4, -2, 4, -4, -3, 2, 2, -4, -4, 3, 1],[0, 3, -1, 0, 3, -2, -4, 0, -4, -2, -2, 2]]
[[1, 1, 3, -1, -2, -4, 0, 0, -3, 1],[-4, 2, -1, 2, -4, 0, 3, 4, 3, 1],[4, -1, 0, 0, 2, 1, -4, -3, -3, 4],[4, 3, 3, -4, 2, -2, 1, 2, -3, -4],[-1, -1, -2, -4, 2, 3, -2, -4, 0, -1],[2, -2, -3, 4, -1, -1, 0, -3, -3, -3],[-2, 1, 4, 0, 1, 3, 1, -2, 1, -3],[4, -2, 4, 1, -2, 3, -2, 1, -3, -4],[-1, 1, 1, -4, 2, -3, 3, -4, 3, -4],[0, -3, -3, -3, 0, 0, 1, 1, -4, -4],[2, 2, -2, -1, 3, 0, -2, -1, 4, -1],[0, 3, -3, 3, 4, -4, -3, 0, 4, -2]]
[[2, -2, -2, -3, 3, 4, -1, 0, 3, -4, -1, 4, -3],[-2, -2, 1, -1, 1, -4, -4, 1, -4, -4, 2, 3, 0],[-4, 0, 2, 3, 1, -2, -2, 1, 4, -2, 2, -1, -3],[2, 2, -3, 4, -4, 1, 2, 0, -4, 3, 2, -2, 0],[0, 0, 3, -2, 1, -4, 4, -4, 3, 1, 0, -2, 4],[-1, 4, 0, 2, 3, 2, 0, 1, 2, 2, 1, 4, 4],[-2, -3, -2, -4, 0, 3, 0, -3, -3, 1, -3, 4, -3],[-2, -2, 4, 3, -3, -2, -4, 1, -1, -4, 2, -1, 0],[-3, -2, -3, -1, -1, -2, 4, 4, 4, 4, 3, 2, 1],[-3, 3, 2, -4, -4, 0, 0, 3, -2, -1, 3, -3, 2],[1, -4, 2, 1, -1, -3, 1, 0, 3, 1, 2, 2, 4],[-2, -2, 3, 3, 3, 3, 3, -3, -1, -2, 0, -1, 2]]
[[-3, 0, -3, 3, 3, -3, -2, 3, -4, 0, 3, 3, -3, 4],[2, -1, 1, 1, -2, 1, 2, -1, 4, -2, -3, 3, -3, -3],[4, 3, 3, 4, 3, 1, 3, 4, -1, 4, 3, -1, -4, -3],[-3, 0, 0, -4, 4, -2, -3, -1, 4, 2, 3, -4, -2, -2],[-4, 0, -1, 3, -3, -1, 3, 0, -4, 3, -2, 2, 3, -3],[-2, 4, -4, 2, 4, 0, 1, -3, 3, 3, -2, 3, 4, 0],[-3, -3, -3, 4, -3, 1, 4, -2, -1, 4, 1, 0, 4, 2],[1, 4, 2, -3, 3, 2, -2, 1, -1, -1, -1, -3, 4, -4],[4, -1, 4, 4, -2, 2, -2, 4, -3, 2, 0, -4, 0, -2],[-3, 2, -2, 2, -4, 0, 2, -4, 2, 2, -4, -1, 2, -4],[-3, -2, 4, -3, 3, 1, -3, 1, 1, 0, -2, 4, -3, -2],[-3, 1, 0, -2, -4, -2, 2, 0, -3, -3, -2, -4, 3, 0]]
*/