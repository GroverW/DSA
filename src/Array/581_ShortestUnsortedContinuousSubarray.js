/*
Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.

 

Example 1:

Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Example 2:

Input: nums = [1,2,3,4]
Output: 0
Example 3:

Input: nums = [1]
Output: 0
 

Constraints:

1 <= nums.length <= 104
-105 <= nums[i] <= 105
*/

var findUnsortedSubarray = function (nums) {
  let start;
  let end;
  let curr = 1;
  let largest = nums[0];
  const stack = [0];

  while (curr < nums.length) {
    if (nums[curr] < largest) {
      while (stack.length && nums[stack[stack.length - 1]] > nums[curr]) {
        stack.pop();
      }

      const min = stack[stack.length - 1] + 1 || 0;

      if (start === undefined || min < start) start = min;

      end = curr;
    }
    if (start === undefined) stack.push(curr);
    largest = Math.max(largest, nums[curr]);
    curr += 1;
  }

  return end - start + 1 || 0;
};

// for (let i = 0; i < 10; i += 1) {
//   const len = Math.floor(Math.random() * 100) + 1;
//   let randomChance = 1;

//   const nums = [1];
//   let largest = 1;
//   for (let i = 0; i < len; i += 1) {
//     const isSmaller = Math.random() > randomChance;
//     if (isSmaller) {
//       nums.push(Math.floor(Math.random() * largest));
//     }
//     else {
//       nums.push(largest + 1);
//       largest += 2;
//       randomChance = Math.max(0.9, randomChance - 0.01);
//     }
//   }

//   logOutList(printRow(nums));
// }


const tests = [
  [2, 6, 4, 8, 10, 9, 15],
  [1, 2, 3, 4],
  [1],
  [1, 2, 4, 6, 8, 10, 12, 14, 16],
  [1, 2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 20, 22, 6, 24, 26, 28, 6, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56],
  [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 4, 20, 22, 24, 26, 28, 30, 32, 20, 34, 36, 38, 40, 23, 42, 44, 46, 48, 50, 52, 54, 56, 5, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 19, 100, 102, 104, 106, 108, 110, 112, 18, 114, 56, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172],
  [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 11, 62, 64, 66, 68, 60, 70, 72, 74, 76, 54, 78, 80, 82, 84, 86, 88, 90, 44, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116],
  [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 0, 60, 62, 64, 66, 68, 70, 72, 46, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 82, 118, 35, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 44, 162],
  [1, 2, 4, 6, 8, 10, 4, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 27, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 64, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 54, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 1, 134, 136, 138, 60, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158],
  [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66],
  [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 23, 27, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60],
  [1, 2, 4, 6],
  [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 5, 28, 30, 32, 34, 36, 26, 38, 40, 18, 42, 44, 46, 48, 50],
];

for (let test of tests) {
  logOutList(findUnsortedSubarray(test));
}

/*
[2, 6, 4, 8, 10, 9, 15]
[1, 2, 3, 4]
[1]
[1, 2, 4, 6, 8, 10, 12, 14, 16]
[1, 2, 4, 6, 8, 10, 0, 12, 14, 16, 18, 20, 22, 6, 24, 26, 28, 6, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56]
[1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 4, 20, 22, 24, 26, 28, 30, 32, 20, 34, 36, 38, 40, 23, 42, 44, 46, 48, 50, 52, 54, 56, 5, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 19, 100, 102, 104, 106, 108, 110, 112, 18, 114, 56, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172]
[1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 11, 62, 64, 66, 68, 60, 70, 72, 74, 76, 54, 78, 80, 82, 84, 86, 88, 90, 44, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116]
[1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 0, 60, 62, 64, 66, 68, 70, 72, 46, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 82, 118, 35, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 44, 162]
[1, 2, 4, 6, 8, 10, 4, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 27, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 64, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 54, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 1, 134, 136, 138, 60, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158]
[1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66]
[1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 23, 27, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60]
[1, 2, 4, 6]
[1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 5, 28, 30, 32, 34, 36, 26, 38, 40, 18, 42, 44, 46, 48, 50]

5
0
0
0
18
62
44
86
75
0
4 5
0
21

5
0
0
0
18
62
44
86
75
0
5
0
21

*/