/*
You are given a circular array nums of positive and negative integers. If a number k at an index is positive, then move forward k steps. Conversely, if it's negative (-k), move backward k steps. Since the array is circular, you may assume that the last element's next element is the first element, and the first element's previous element is the last element.

Determine if there is a loop (or a cycle) in nums. A cycle must start and end at the same index and the cycle's length > 1. Furthermore, movements in a cycle must all follow a single direction. In other words, a cycle must not consist of both forward and backward movements.

 

Example 1:

Input: [2,-1,1,2,2]
Output: true
Explanation: There is a cycle, from index 0 -> 2 -> 3 -> 0. The cycle's length is 3.
Example 2:

Input: [-1,2]
Output: false
Explanation: The movement from index 1 -> 1 -> 1 ... is not a cycle, because the cycle's length is 1. By definition the cycle's length must be greater than 1.
Example 3:

Input: [-2,1,-1,-2,-2]
Output: false
Explanation: The movement from index 1 -> 2 -> 1 -> ... is not a cycle, because movement from index 1 -> 2 is a forward movement, but movement from index 2 -> 1 is a backward movement. All movements in a cycle must follow a single direction.
 

Note:

-1000 ≤ nums[i] ≤ 1000
nums[i] ≠ 0
1 ≤ nums.length ≤ 5000
*/

// recursively
// could do in O(1) space iteratively by multiplying the current index by 1000
var circularArrayLoop = function (nums) {

  const findLoop = (parent, current) => {
    const num = nums[current];
    if (!num || num * nums[parent] < 0) return false;
    if (parent === current) {
      nums[current] = 0;
      return false;
    }
    if (Math.abs(num) > 1000) return true;
    let next;
    if (num < 0) {
      next = current + num;
      if (next < 0) next = (nums.length + (next % nums.length));
      nums[current] -= 1000;
    } else {
      next = (current + num) % nums.length;
      nums[current] += 1000;
    }

    if (findLoop(current, next)) return true;

    nums[current] = 0;
    return false;
  }

  for (let i = 0; i < nums.length; i += 1) {
    if (!nums[i]) continue;
    if (findLoop(undefined, i)) return true;
  }

  return false;
};

/*

 */


// const maxLen = 100;
// for (let i = 0; i < 40; i += 1) {
//   const len = Math.floor(Math.random() * maxLen) + 1;

//   const nums = new Array(len).fill(0)
//     .map(() => {
//       const num = Math.floor(Math.random() * (2 * len)) - len;
//       const noZeroes = Math.random() < .5 ? -1 : 1;
//       return num + (!num * noZeroes);
//     })


//   logOutList(printRow(nums) + ',');
// }

const tests = [
  [2, -1, 1, 2, 2],
  [-1, 2],
  [-2, 1, -1, -2, -2],
  [-3, 5, -8, 59, -44, 51, -48, 26, 50, -19, -22, 18, 19, -40, 4, -19, 57, 26, -39, 22, -12, -12, 26, 41, 4, -1, -24, -18, -23, 22, -6, -57, 27, 35, 43, 46, -54, 26, 36, 23, -12, 59, -6, -47, 24, -57, -1, -17, -52, 13, -44, 42, -25, 53, -5, -45, 53, 44, 22, 35, 26, -55],
  [1, 3, -1, -2],
  [-23, -41, -40, 13, -48, -41, -5, 19, -65, 22, -4, -9, 43, 33, -43, -41, 58, 42, -5, -1, -43, -1, -49, -63, 57, 46, -54, 62, 25, 25, -41, -55, -41, 31, -58, -50, 2, 6, 29, 46, 52, -1, -43, -27, -56, -47, 50, -59, -19, -45, -12, -13, -35, 59, -3, -14, -29, 16, -39, -37, 45, 45, -25, 1, 37],
  [-2, -11, 7, 7, 14, 1, 16, 8, 11, 9, 14, 3, -8, 12, 4, 16, 16, -7],
  [37, 38, 47, -49, -39, 32, 33, -28, -34, 19, -19, -14, 51, 14, -39, 34, -46, -21, 10, -12, 55, 17, -16, 13, 18, 38, -53, -33, -48, -6, -21, 33, 4, 51, 43, 4, 39, 52, 15, 26, -34, 41, 53, -54, -11, -1, -45, -12, 46, -35, 22, -8, -49, -22, -19, 23, 29, -7, 38],
  [-30, -6, 35, -37, 43, 23, 57, 21, 21, 6, 54, -17, 9, -14, 39, 47, 27, 16, -36, 5, -41, -24, -46, 26, 2, -29, 66, -74, 6, 26, 2, -65, -31, -9, -67, 25, 1, -10, 73, -41, -25, -59, -55, 67, -70, 67, 45, -63, 4, -65, 51, -26, -14, 19, 45, 74, 49, -49, -24, -52, 51, -67, -1, 48, 12, -45, 8, -40, -63, -44, -65, -28, -35, 3, 45, -48],
  [10, 1, 3, -1, 10, 11, 8, 2, 10, -12, -1, -11],
  [-10, -2, 5, 47, 5, 24, -4, 48, -36, -6, -17, -6, -49, -16, -22, -31, 15, -15, 29, -38, -5, -56, -1, 1, 5, 28, 41, 41, -47, -20, -43, -43, 41, 8, 26, -35, 47, 44, -50, -4, -21, 35, -54, 44, -23, -24, -15, -54, -21, 55, -9, -1, -57, -35, -23, 5, 25],
  [-11, -17, 19, -1, 18, 17, 20, -24, -14, 12, 16, -18, 8, 16, -19, -16, 11, 14, -1, -23, 16, -5, 3, 4, -23, 24],
  [-1, -1],
  [6, -9, 1, -2, 14, -8, -9, 14, 15, -10, 15, -15, -13, -1, 13, 17, -1, -7, 7],
  [-12, 1, -11, -20, -6, 6, -9, -16, -2, -22, 2, -24, -12, -20, -1, 11, -16, 9, -6, 23, 11, 2, 13, -23],
  [-28, -58, 31, -42, 13, -69, 52, -27, -28, -5, 44, 63, -71, 32, -43, -60, -45, 55, 55, -74, -9, -55, 61, 12, -20, 10, -25, 18, -12, 65, -71, 46, -17, 50, -69, -64, 18, -39, -35, -61, 49, 38, 13, 56, -49, 14, 5, -56, -30, 26, 6, 54, 54, -62, -24, -1, 1, -18, 55, 46, 5, 73, 71, -58, -35, 7, -65, 66, -1, -24, -27, 66, 41, -52, 1, -25],
  [-6, -4, -1, 4, 6, 5, 8, -2, -1, 6],
  [-5, 8, -1, -20, -22, 23, 2, -9, 6, -6, 11, -7, 18, -27, 7, 16, 5, 12, -7, 23, -27, 12, -19, 24, 26, -16, 13, 8, -14],
  [-30, 65, 26, -56, -48, -16, 12, -17, -18, -71, 58, -30, -68, -52, -43, 39, 64, 59, 45, -36, 34, -25, -39, -59, -39, 21, 2, 71, -15, -15, 54, 8, -61, 57, -28, 25, -44, 3, 44, 4, -31, -46, 37, 2, -50, -45, 19, -54, 17, -29, 26, -58, 28, 48, 16, -51, -21, -11, -38, 2, 64, -15, -27, -2, 24, 28, 56, 47, -71, -48, 65, 49],
  [-5, 10, 8, 3, 13, 2, -13, 2, 5, 15, 1, 1, -10, 17, 1, 13, -4, -17, -2, 16],
  [-72, 32, 2, -21, 35, -64, 66, 58, -8, -65, 19, 56, 58, -34, 25, 46, 5, -43, -10, -34, -12, 56, -7, 23, -54, 69, -18, -39, 56, -33, 22, -45, 49, 3, 60, -45, -9, -16, 54, -47, 9, 25, -47, -10, 19, 67, -53, 20, -9, -71, 44, -48, -2, 9, -28, -6, -53, -26, 39, -44, 23, -27, -43, -19, 61, 61, 33, -27, 43, -50, 30, -14],
  [56, 54, -65, 40, 18, -8, 45, 2, 2, 65, -30, -60, 52, 17, 15, -72, 63, 63, -33, -64, -13, 68, -50, 6, 48, -54, -11, -71, -10, 57, 41, 29, -26, -50, 21, -17, -8, 56, 62, 57, -49, -38, 46, 29, -45, -18, 33, -24, -28, 53, -38, -17, -5, -15, 48, 47, -56, -45, 41, 50, 68, -6, 50, -49, -60, 12, -31, -18, -37, 22, 13, -30],
  [28, -10, -15, 23, 9, -17, 20, -31, -17, 15, -19, 4, 21, -24, -10, -26, 23, 19, -2, -37, 15, 14, 16, 15, 27, 7, 9, 8, -11, 22, 35, -33, -23, -3, 24, 9, 15],
  [1, 6, -5, -11, -2, 10, -14, 1, 13, -2, 7, 9, -11, -11, -3, 1],
  [55, -23, 12, -55, 60, 11, -53, -50, -18, 45, 7, 15, -13, 31, 4, 16, 40, 26, 47, 42, -9, -59, 19, -22, -44, 41, -38, 48, 50, 9, -4, -15, 9, 39, -23, 19, -48, -61, 56, -44, -8, -7, -54, 29, 4, -29, 23, -17, 52, 35, 44, -52, -43, 52, 40, -32, 25, 47, -54, 51, 33],
  [-4, 7, 4, 48, 10, -23, -4, 28, -45, 53, -11, -21, 28, -6, -7, 30, 48, -44, -11, 54, -40, 49, -4, 19, -25, -14, -53, 32, 18, 26, -7, -7, 33, 23, -22, -16, 5, -26, -55, 51, 52, 49, 7, 2, -10, 23, -27, -56, 8, 50, 37, -16, -22, 57, 55, -39, -13, -43, -41],
  [-2, -2, 2, -1],
  [49, -13, 14, 24, 23, -56, 37, 31, -72, 81, 44, 74, 50, 50, -76, -42, 60, 6, -33, -40, -70, -73, -59, -23, -49, -42, -28, -63, -79, 16, -36, 44, 17, -16, -59, -22, 38, -2, 58, 50, -61, -79, 16, 35, 50, -56, -44, -62, -61, 10, 80, -60, -80, 22, -43, 38, -48, -55, -77, 11, 53, 54, 11, -40, -26, -22, -5, 17, -1, 80, 24, -41, -6, -74, -75, 45, 13, 74, 7, 27, -75, 57],
  [-17, 34, 26, 36, -9, -19, 24, 39, 11, -30, -36, 36, 14, -17, -36, 1, -25, -24, -31, -41, -21, 6, -9, 37, 19, 38, -11, 40, -1, 3, -37, -7, -36, -36, -31, -9, 26, 21, -4, -36, -11],
];

let i = 0;
for (let test of tests) {
  console.time(i);
  logOutList(circularArrayLoop(test));
  console.timeEnd(i);
  i += 1;
}

/*
[2, -1, 1, 2, 2]
[-1, 2]
[-2, 1, -1, -2, -2]
[-3, 5, -8, 59, -44, 51, -48, 26, 50, -19, -22, 18, 19, -40, 4, -19, 57, 26, -39, 22, -12, -12, 26, 41, 4, -1, -24, -18, -23, 22, -6, -57, 27, 35, 43, 46, -54, 26, 36, 23, -12, 59, -6, -47, 24, -57, -1, -17, -52, 13, -44, 42, -25, 53, -5, -45, 53, 44, 22, 35, 26, -55]
[1, 3, -1, -2]
[-23, -41, -40, 13, -48, -41, -5, 19, -65, 22, -4, -9, 43, 33, -43, -41, 58, 42, -5, -1, -43, -1, -49, -63, 57, 46, -54, 62, 25, 25, -41, -55, -41, 31, -58, -50, 2, 6, 29, 46, 52, -1, -43, -27, -56, -47, 50, -59, -19, -45, -12, -13, -35, 59, -3, -14, -29, 16, -39, -37, 45, 45, -25, 1, 37]
[-2, -11, 7, 7, 14, 1, 16, 8, 11, 9, 14, 3, -8, 12, 4, 16, 16, -7]
[37, 38, 47, -49, -39, 32, 33, -28, -34, 19, -19, -14, 51, 14, -39, 34, -46, -21, 10, -12, 55, 17, -16, 13, 18, 38, -53, -33, -48, -6, -21, 33, 4, 51, 43, 4, 39, 52, 15, 26, -34, 41, 53, -54, -11, -1, -45, -12, 46, -35, 22, -8, -49, -22, -19, 23, 29, -7, 38]
[-30, -6, 35, -37, 43, 23, 57, 21, 21, 6, 54, -17, 9, -14, 39, 47, 27, 16, -36, 5, -41, -24, -46, 26, 2, -29, 66, -74, 6, 26, 2, -65, -31, -9, -67, 25, 1, -10, 73, -41, -25, -59, -55, 67, -70, 67, 45, -63, 4, -65, 51, -26, -14, 19, 45, 74, 49, -49, -24, -52, 51, -67, -1, 48, 12, -45, 8, -40, -63, -44, -65, -28, -35, 3, 45, -48]
[10, 1, 3, -1, 10, 11, 8, 2, 10, -12, -1, -11]
[-10, -2, 5, 47, 5, 24, -4, 48, -36, -6, -17, -6, -49, -16, -22, -31, 15, -15, 29, -38, -5, -56, -1, 1, 5, 28, 41, 41, -47, -20, -43, -43, 41, 8, 26, -35, 47, 44, -50, -4, -21, 35, -54, 44, -23, -24, -15, -54, -21, 55, -9, -1, -57, -35, -23, 5, 25]
[-11, -17, 19, -1, 18, 17, 20, -24, -14, 12, 16, -18, 8, 16, -19, -16, 11, 14, -1, -23, 16, -5, 3, 4, -23, 24]
[-1, -1]
[6, -9, 1, -2, 14, -8, -9, 14, 15, -10, 15, -15, -13, -1, 13, 17, -1, -7, 7]
[-12, 1, -11, -20, -6, 6, -9, -16, -2, -22, 2, -24, -12, -20, -1, 11, -16, 9, -6, 23, 11, 2, 13, -23]
[-28, -58, 31, -42, 13, -69, 52, -27, -28, -5, 44, 63, -71, 32, -43, -60, -45, 55, 55, -74, -9, -55, 61, 12, -20, 10, -25, 18, -12, 65, -71, 46, -17, 50, -69, -64, 18, -39, -35, -61, 49, 38, 13, 56, -49, 14, 5, -56, -30, 26, 6, 54, 54, -62, -24, -1, 1, -18, 55, 46, 5, 73, 71, -58, -35, 7, -65, 66, -1, -24, -27, 66, 41, -52, 1, -25]
[-6, -4, -1, 4, 6, 5, 8, -2, -1, 6]
[-5, 8, -1, -20, -22, 23, 2, -9, 6, -6, 11, -7, 18, -27, 7, 16, 5, 12, -7, 23, -27, 12, -19, 24, 26, -16, 13, 8, -14]
[-30, 65, 26, -56, -48, -16, 12, -17, -18, -71, 58, -30, -68, -52, -43, 39, 64, 59, 45, -36, 34, -25, -39, -59, -39, 21, 2, 71, -15, -15, 54, 8, -61, 57, -28, 25, -44, 3, 44, 4, -31, -46, 37, 2, -50, -45, 19, -54, 17, -29, 26, -58, 28, 48, 16, -51, -21, -11, -38, 2, 64, -15, -27, -2, 24, 28, 56, 47, -71, -48, 65, 49]
[-5, 10, 8, 3, 13, 2, -13, 2, 5, 15, 1, 1, -10, 17, 1, 13, -4, -17, -2, 16]
[-72, 32, 2, -21, 35, -64, 66, 58, -8, -65, 19, 56, 58, -34, 25, 46, 5, -43, -10, -34, -12, 56, -7, 23, -54, 69, -18, -39, 56, -33, 22, -45, 49, 3, 60, -45, -9, -16, 54, -47, 9, 25, -47, -10, 19, 67, -53, 20, -9, -71, 44, -48, -2, 9, -28, -6, -53, -26, 39, -44, 23, -27, -43, -19, 61, 61, 33, -27, 43, -50, 30, -14]
[56, 54, -65, 40, 18, -8, 45, 2, 2, 65, -30, -60, 52, 17, 15, -72, 63, 63, -33, -64, -13, 68, -50, 6, 48, -54, -11, -71, -10, 57, 41, 29, -26, -50, 21, -17, -8, 56, 62, 57, -49, -38, 46, 29, -45, -18, 33, -24, -28, 53, -38, -17, -5, -15, 48, 47, -56, -45, 41, 50, 68, -6, 50, -49, -60, 12, -31, -18, -37, 22, 13, -30]
[28, -10, -15, 23, 9, -17, 20, -31, -17, 15, -19, 4, 21, -24, -10, -26, 23, 19, -2, -37, 15, 14, 16, 15, 27, 7, 9, 8, -11, 22, 35, -33, -23, -3, 24, 9, 15]
[1, 6, -5, -11, -2, 10, -14, 1, 13, -2, 7, 9, -11, -11, -3, 1]
[55, -23, 12, -55, 60, 11, -53, -50, -18, 45, 7, 15, -13, 31, 4, 16, 40, 26, 47, 42, -9, -59, 19, -22, -44, 41, -38, 48, 50, 9, -4, -15, 9, 39, -23, 19, -48, -61, 56, -44, -8, -7, -54, 29, 4, -29, 23, -17, 52, 35, 44, -52, -43, 52, 40, -32, 25, 47, -54, 51, 33]
[-4, 7, 4, 48, 10, -23, -4, 28, -45, 53, -11, -21, 28, -6, -7, 30, 48, -44, -11, 54, -40, 49, -4, 19, -25, -14, -53, 32, 18, 26, -7, -7, 33, 23, -22, -16, 5, -26, -55, 51, 52, 49, 7, 2, -10, 23, -27, -56, 8, 50, 37, -16, -22, 57, 55, -39, -13, -43, -41]
[-2, -2, 2, -1]
[49, -13, 14, 24, 23, -56, 37, 31, -72, 81, 44, 74, 50, 50, -76, -42, 60, 6, -33, -40, -70, -73, -59, -23, -49, -42, -28, -63, -79, 16, -36, 44, 17, -16, -59, -22, 38, -2, 58, 50, -61, -79, 16, 35, 50, -56, -44, -62, -61, 10, 80, -60, -80, 22, -43, 38, -48, -55, -77, 11, 53, 54, 11, -40, -26, -22, -5, 17, -1, 80, 24, -41, -6, -74, -75, 45, 13, 74, 7, 27, -75, 57]
[-17, 34, 26, 36, -9, -19, 24, 39, 11, -30, -36, 36, 14, -17, -36, 1, -25, -24, -31, -41, -21, 6, -9, 37, 19, 38, -11, 40, -1, 3, -37, -7, -36, -36, -31, -9, 26, 21, -4, -36, -11]
*/