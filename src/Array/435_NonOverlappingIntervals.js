/*
Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:

Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.
Example 2:

Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.
Example 3:

Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Note:

You may assume the interval's end point is always bigger than its start point.
Intervals like [1,2] and [2,3] have borders "touching" but they don't overlap each other.
*/

// with stack
var eraseOverlapIntervals = function (intervals) {
  if (!intervals.length) return 0;
  
  intervals.sort((a, b) => a[0] - b[0] || b[1] - a[1])

  const stack = [intervals[0][1]];

  for (let i = 1; i < intervals.length; i += 1) {
    const endA = stack[stack.length - 1];
    const [startB, endB] = intervals[i];

    if (startB >= endA) {
      stack.push(endB);
    } else if (endB <= endA) {
      stack.pop();
      stack.push(endB);
    }
  }

  return intervals.length - stack.length;
};

// with pointers
var eraseOverlapIntervals = function (intervals) {
  if (!intervals.length) return 0;
  
  intervals.sort((a, b) => a[0] - b[0] || b[1] - a[1])

  let count = 0;
  let start = 0;

  for (let i = 1; i < intervals.length; i += 1) {
    const [_, endA] = intervals[start];
    const [startB, endB] = intervals[i];

    if (startB >= endA) {
      start = i;
    } else if (endB <= endA) {
      start = i;
      count += 1;
    } else {
      count += 1;
    }
  }

  return count;
};

/*
[       ] <-
   []

[       ] <-
 [       ]
  [       ]
   [       ]
    [       ]
     [       ]
      [       ]
       [       ]
        [       ]
         [       ]
[  ]
  [    ]
   [       ]
[1, 2, 3]
[1, 2]
   [2, 3]
      [3, 4]
*/

// const maxEnd = 30;
// for (let i = 0; i < 20; i += 1) {
//   const numIntervals = Math.floor(Math.random() * maxEnd) + 1;

//   const intervals = [];
//   for(let j = 0; j < numIntervals; j += 1) {
//     const end = Math.floor(Math.random() * maxEnd) + 1;
//     const start = Math.floor(Math.random() * end);
//     intervals.push([start, end]);
//   }
//   logOutList(printGrid(intervals));
// }

/*

*/

const tests = [
  [[1, 2], [2, 3], [3, 4], [1, 3]],
  [[1, 2], [1, 2], [1, 2]],
  [[1, 2], [2, 3]],
  [[4, 6], [11, 30], [13, 24], [5, 11], [8, 28], [5, 6], [4, 28], [3, 4], [0, 29], [0, 25], [25, 27], [5, 6], [12, 21], [1, 2], [1, 14], [9, 27], [4, 9], [1, 16], [10, 29], [17, 20], [18, 21]],
  [[5, 7], [1, 13], [2, 9], [1, 19], [3, 5], [1, 2], [1, 4], [1, 2], [1, 9], [2, 29], [18, 29], [10, 20], [2, 8], [0, 6], [2, 25], [6, 7], [1, 20], [3, 7], [4, 8], [10, 18], [6, 24], [1, 19], [10, 15]],
  [[2, 15], [8, 21], [18, 27], [4, 16], [11, 30], [1, 3]],
  [[21, 29], [20, 21], [1, 18], [18, 24], [3, 17], [5, 23], [1, 25], [0, 6], [23, 27], [0, 1], [6, 24], [1, 3], [4, 23], [21, 24], [0, 17], [9, 15], [0, 1], [14, 27]],
  [[8, 17], [3, 23], [1, 21], [15, 29], [16, 27]],
  [[12, 16], [1, 29], [7, 15], [3, 27], [8, 16]],
  [[20, 27], [2, 3], [6, 15], [24, 28], [15, 16], [12, 15], [3, 29], [8, 20], [7, 8], [10, 16], [5, 11], [2, 15], [9, 10], [1, 22], [6, 14]],
  [[8, 12], [2, 6], [26, 27], [4, 21], [2, 24], [20, 27], [10, 12], [0, 5], [27, 30], [5, 8]],
  [[1, 25], [12, 27], [3, 7], [19, 22], [10, 29], [17, 28], [4, 10], [1, 4], [5, 6], [12, 15], [0, 12], [12, 21], [2, 3], [2, 4], [20, 29], [22, 28], [1, 25], [2, 22], [18, 24], [13, 25], [24, 26], [8, 28]],
  [[1, 5], [6, 13], [7, 24], [7, 11], [4, 26], [3, 18], [11, 13], [22, 27], [4, 8]],
  [[4, 15], [1, 3], [5, 29], [14, 18], [8, 15], [0, 3], [11, 12], [0, 1], [7, 15], [3, 23], [2, 15], [1, 4], [5, 29], [8, 18], [19, 24], [7, 26], [3, 13], [5, 9], [9, 22], [1, 23], [1, 12], [0, 17]],
  [[2, 4], [2, 6], [23, 27], [10, 18], [6, 19], [11, 12], [6, 18], [8, 20], [10, 13], [9, 24], [10, 16], [1, 2], [1, 3], [10, 17], [21, 26], [28, 30], [14, 24], [17, 25]],
  [[24, 27], [1, 26], [19, 21], [3, 6], [8, 14], [4, 8], [0, 2], [0, 1], [3, 4], [10, 11]],
  [[10, 28], [0, 8], [1, 8], [13, 26], [1, 11]],
  [[0, 2], [12, 23], [4, 8], [17, 19], [6, 30], [1, 4], [15, 17], [13, 26], [11, 16], [18, 28], [4, 11], [12, 15], [5, 13], [4, 23], [0, 1], [11, 24], [0, 6], [1, 5], [1, 24], [5, 11]],
  [[4, 18], [1, 13], [1, 3], [24, 25], [5, 9], [17, 21], [1, 2], [9, 21], [1, 18], [24, 29], [0, 29], [5, 13], [0, 1], [11, 12], [7, 11], [2, 20], [9, 25], [10, 16], [9, 17], [2, 5], [0, 3], [3, 6], [4, 20], [10, 26], [8, 25], [4, 12]],
  [[0, 8], [6, 8], [13, 27], [1, 6], [2, 11], [3, 5], [4, 6], [2, 5], [0, 7], [0, 1], [3, 7], [14, 15], [21, 25], [10, 12], [0, 10]],
  [[0, 1], [9, 15], [4, 13], [0, 22], [16, 24], [1, 28], [7, 22], [7, 29], [25, 26], [29, 30], [28, 30], [7, 12], [1, 8], [11, 19], [1, 13], [2, 4], [3, 8], [7, 22], [7, 25], [3, 15]],
  [[10, 16], [4, 9], [8, 17], [9, 22], [0, 1], [7, 24], [7, 28], [7, 10], [2, 14], [1, 5]],
  [[20, 23], [0, 5], [5, 6], [6, 9], [1, 2], [9, 24], [2, 27], [9, 19], [5, 23], [14, 20], [16, 20], [6, 12], [8, 9], [0, 17], [10, 17], [0, 4], [24, 25], [0, 1], [11, 22], [23, 30], [15, 16], [1, 3]],
];

for (let test of tests) {
  console.time(test.toString());
  logOutList(eraseOverlapIntervals(test));
  console.timeEnd(test.toString());
}

/*
[]
[[1, 2], [2, 3], [3, 4], [1, 3]]
[[1, 2], [1, 2], [1, 2]]
[[1, 2], [2, 3]]
[[4, 6], [11, 30], [13, 24], [5, 11], [8, 28], [5, 6], [4, 28], [3, 4], [0, 29], [0, 25], [25, 27], [5, 6], [12, 21], [1, 2], [1, 14], [9, 27], [4, 9], [1, 16], [10, 29], [17, 20], [18, 21]]
[[5, 7], [1, 13], [2, 9], [1, 19], [3, 5], [1, 2], [1, 4], [1, 2], [1, 9], [2, 29], [18, 29], [10, 20], [2, 8], [0, 6], [2, 25], [6, 7], [1, 20], [3, 7], [4, 8], [10, 18], [6, 24], [1, 19], [10, 15]]
[[2, 15], [8, 21], [18, 27], [4, 16], [11, 30], [1, 3]]
[[21, 29], [20, 21], [1, 18], [18, 24], [3, 17], [5, 23], [1, 25], [0, 6], [23, 27], [0, 1], [6, 24], [1, 3], [4, 23], [21, 24], [0, 17], [9, 15], [0, 1], [14, 27]]
[[8, 17], [3, 23], [1, 21], [15, 29], [16, 27]]
[[12, 16], [1, 29], [7, 15], [3, 27], [8, 16]]
[[20, 27], [2, 3], [6, 15], [24, 28], [15, 16], [12, 15], [3, 29], [8, 20], [7, 8], [10, 16], [5, 11], [2, 15], [9, 10], [1, 22], [6, 14]]
[[8, 12], [2, 6], [26, 27], [4, 21], [2, 24], [20, 27], [10, 12], [0, 5], [27, 30], [5, 8]]
[[1, 25], [12, 27], [3, 7], [19, 22], [10, 29], [17, 28], [4, 10], [1, 4], [5, 6], [12, 15], [0, 12], [12, 21], [2, 3], [2, 4], [20, 29], [22, 28], [1, 25], [2, 22], [18, 24], [13, 25], [24, 26], [8, 28]]
[[1, 5], [6, 13], [7, 24], [7, 11], [4, 26], [3, 18], [11, 13], [22, 27], [4, 8]]
[[4, 15], [1, 3], [5, 29], [14, 18], [8, 15], [0, 3], [11, 12], [0, 1], [7, 15], [3, 23], [2, 15], [1, 4], [5, 29], [8, 18], [19, 24], [7, 26], [3, 13], [5, 9], [9, 22], [1, 23], [1, 12], [0, 17]]
[[2, 4], [2, 6], [23, 27], [10, 18], [6, 19], [11, 12], [6, 18], [8, 20], [10, 13], [9, 24], [10, 16], [1, 2], [1, 3], [10, 17], [21, 26], [28, 30], [14, 24], [17, 25]]
[[24, 27], [1, 26], [19, 21], [3, 6], [8, 14], [4, 8], [0, 2], [0, 1], [3, 4], [10, 11]]
[[10, 28], [0, 8], [1, 8], [13, 26], [1, 11]]
[[0, 2], [12, 23], [4, 8], [17, 19], [6, 30], [1, 4], [15, 17], [13, 26], [11, 16], [18, 28], [4, 11], [12, 15], [5, 13], [4, 23], [0, 1], [11, 24], [0, 6], [1, 5], [1, 24], [5, 11]]
[[4, 18], [1, 13], [1, 3], [24, 25], [5, 9], [17, 21], [1, 2], [9, 21], [1, 18], [24, 29], [0, 29], [5, 13], [0, 1], [11, 12], [7, 11], [2, 20], [9, 25], [10, 16], [9, 17], [2, 5], [0, 3], [3, 6], [4, 20], [10, 26], [8, 25], [4, 12]]
[[0, 8], [6, 8], [13, 27], [1, 6], [2, 11], [3, 5], [4, 6], [2, 5], [0, 7], [0, 1], [3, 7], [14, 15], [21, 25], [10, 12], [0, 10]]
[[0, 1], [9, 15], [4, 13], [0, 22], [16, 24], [1, 28], [7, 22], [7, 29], [25, 26], [29, 30], [28, 30], [7, 12], [1, 8], [11, 19], [1, 13], [2, 4], [3, 8], [7, 22], [7, 25], [3, 15]]
[[10, 16], [4, 9], [8, 17], [9, 22], [0, 1], [7, 24], [7, 28], [7, 10], [2, 14], [1, 5]]
[[20, 23], [0, 5], [5, 6], [6, 9], [1, 2], [9, 24], [2, 27], [9, 19], [5, 23], [14, 20], [16, 20], [6, 12], [8, 9], [0, 17], [10, 17], [0, 4], [24, 25], [0, 1], [11, 22], [23, 30], [15, 16], [1, 3]]
*/