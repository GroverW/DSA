/*
An undirected, connected graph of N nodes (labeled 0, 1, 2, ..., N-1) is given as graph.

graph.length = N, and j != i is in the list graph[i] exactly once, if and only if nodes i and j are connected.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

 

Example 1:

Input: [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]
Example 2:

Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]
 

Note:

1 <= graph.length <= 12
0 <= graph[i].length < graph.length
*/

// djikstra (slower, has some useless code)

var shortestPathLength = function (graph) {
  let target = 0;
  for (let i = 0; i < graph.length; i += 1) {
    target |= 1 << i;
  }

  const minOutFix = graph.reduce((min, edges) => Math.min(min, edges.length), Infinity);
  const queue = [];

  graph.forEach((edges, node) => {
    if (edges.length > minOutFix) return;
    queue.push([node, 1 << node, 1, 0]);
  })

  const seen = new Array(graph.length).fill(0)
    .map(() => ({}));

  let minPathLength = Infinity;
  while (queue.length) {
    const [node, visited, count, pathLength] = pop(queue);

    if (pathLength > minPathLength) continue;

    if (visited === target) minPathLength = Math.min(minPathLength, pathLength);



    for (let neighbor of graph[node]) {
      const nextVisited = visited | 1 << neighbor;
      const nextCount = count + (nextVisited !== visited);
      const nextPathLength = pathLength + 1;

      if (seen[neighbor][nextVisited] && seen[neighbor][nextVisited] <= nextPathLength) continue;
      seen[neighbor][nextVisited] = nextPathLength;

      push([neighbor, nextVisited, nextCount, nextPathLength], queue);
    }
  }

  return minPathLength;
};

const push = (node, heap) => {
  heap.push(node);
  siftUp(heap);
}

const pop = (heap) => {
  const last = heap.length - 1;
  [heap[0], heap[last]] = [heap[last], heap[0]];
  const res = heap.pop();
  siftDown(heap);
  return res;
}

const siftUp = (heap) => {
  let current = heap.length - 1;
  while (current > 0) {
    const parent = Math.ceil(current / 2) - 1;
    let next = current;

    if (heap[parent][2] < heap[next][2]) next = parent;

    if (next !== current) {
      [heap[current], heap[next]] = [heap[next], heap[current]];
      current = next;
    } else break;
  }
}

const siftDown = (heap) => {
  let current = 0;
  while (true) {
    const left = current * 2 + 1;
    const right = left + 1;
    let next = current;

    if (heap[left] && heap[left][2] > heap[next][2]) next = left;
    if (heap[right] && heap[right][2] > heap[next][2]) next = right;

    if (next !== current) {
      [heap[current], heap[next]] = [heap[next], heap[current]];
      current = next;
    } else break;
  }
}

// bfs (faster, cleaner)
var shortestPathLength = function (graph) {
  const target = graph.reduce((bits, _, node) => bits |= 1 << node, 0);

  const seen = new Array(graph.length).fill(0)
    .map((_, node) => new Set([1 << node]));
  const queue = graph.map((_, node) => [node, 1 << node]);

  let pathLength = 0;
  while (queue.length) {
    for (let i = queue.length - 1; i >= 0; i -= 1) {
      const [node, visited] = queue.shift();

      if (visited === target) return pathLength;

      for (let neighbor of graph[node]) {
        const nextVisited = visited | 1 << neighbor;

        if (seen[neighbor].has(nextVisited)) continue;
        seen[neighbor].add(nextVisited);
        queue.push([neighbor, nextVisited]);
      }
    }

    pathLength += 1;
  }
};

// let nodes = new Array(12).fill(0).map((_, node) => node);
// for (let i = 0; i < 20; i += 1) {
//   const numNodes = Math.floor(Math.random() * nodes.length) + 1;
//   const selected = nodes.slice(0, numNodes);

//   const graph = selected.map((node) => {
//     const options = [...selected];
//     options.splice(node, 1);
//     const numNeighbors = Math.floor(Math.random() * options.length) + 1;
//     return randomize(options).slice(0, numNeighbors);
//   })

//   logOutList(printGrid(graph));
// }

const tests = [
  [[1], [0, 2, 6], [1, 3], [2], [5], [4, 6], [1, 5, 7], [6]],
  [[1, 2, 3], [0], [0], [0]],
  [[1], [0, 2, 4], [1, 3, 4], [2], [1, 2]],
  [[5, 3, 1, 2, 4], [5, 0], [4, 3, 5, 0], [4], [5, 2, 3, 0, 1], [2, 1, 0, 3]],
  [[2], [3], [1, 3], [0, 2, 1]],
  [[4], [2, 5, 4, 3], [1, 4, 0, 5, 3], [1, 5, 2, 4], [2, 3, 5, 0], [4, 1, 2]],
  [[8], [2, 9, 0, 11, 10, 8, 6, 5, 7, 3, 4], [5, 6, 10, 4, 8, 0, 7, 1, 11, 3, 9], [6, 1, 0, 10, 9, 7, 4, 11], [10, 3, 6, 1, 2, 0, 7], [6], [5, 8, 0, 7], [11, 8, 3, 10, 2, 5], [9, 6], [4, 0, 1, 7, 3, 8, 11, 6, 5, 10, 2], [2], [5, 4, 0, 3, 6, 1]],
  [[1, 6], [8, 7], [7, 6, 5, 0, 4], [1, 0, 8], [8, 6], [0, 4, 1, 2, 3], [2, 3, 5, 0, 4, 7, 1], [8, 3, 1, 6, 5, 4], [4, 0, 3]],
  [[4, 8], [4, 3, 7, 8, 5], [4, 0, 7, 5, 1, 3, 6, 8], [6, 2, 4], [3, 1, 2], [8, 6, 7, 3, 1, 4, 0], [3, 1, 7], [4], [2, 3]],
  [[1, 2, 4, 5], [2, 3, 4], [3], [0], [0, 3, 1, 5], [1, 4, 0, 2]],
  [[4, 9, 5, 7, 6, 8, 10], [5, 4, 10, 2, 3, 9, 6, 0, 7, 8], [7, 10, 5, 1, 0, 6], [9, 1, 5, 2, 0, 8, 4, 6, 7, 10], [9], [7, 6, 2, 4, 9, 8], [10, 3, 8, 1, 4, 7, 0], [10, 3, 2, 5, 4, 1, 8], [0, 2, 4, 10, 7], [2, 10, 5], [5, 1, 6, 4, 9, 0, 3, 7, 8]],
  [[1, 2], [2, 0], [0]],
  [[2, 8, 7, 9, 4, 1], [8, 9], [1, 3, 0, 8, 10], [9, 6, 5, 0, 10, 2, 4, 7], [7, 3, 5, 1, 6], [9, 6, 1, 4], [3, 4, 2, 7, 5], [4, 5, 8], [2], [0, 10, 8], [9, 5, 4, 3, 1, 7, 8, 6]],
  [[1, 5, 9], [3, 0, 9, 5, 8, 2, 4, 7], [4, 3, 0, 1, 5, 9, 8, 7, 6], [8, 5], [6, 7, 1, 3], [2, 3, 9, 8, 7, 1, 4], [5, 2, 9], [2, 6, 8, 0, 4], [6, 0, 4], [8]],
  [[4, 3, 2, 5, 1], [2], [0, 1, 5, 3], [5, 2, 0, 1], [3, 1, 5], [0, 2, 1, 4]],
  [[1], [0]],
  [[7, 3], [5], [5, 4, 1, 3, 6, 0], [2, 0, 6, 4], [3, 1], [7, 3], [0, 3, 2, 1, 5], [2, 1]],
  [[4, 1, 3, 2, 5], [0, 2], [5, 0, 4, 3], [0, 1, 4, 2], [1, 0, 5, 3], [1, 0, 2, 4]],
  [[3], [2], [0, 1], [0]],
  [[3, 6, 7, 8, 2, 1, 4, 5], [6, 4, 8, 7, 2, 0, 5], [5, 7, 8, 0, 3, 4], [6, 1, 8, 4], [0, 6, 7, 3, 2, 8, 1], [8, 4, 1, 3, 6, 0, 7], [1, 2, 3, 5, 8, 4, 0, 7], [5, 4, 3, 1], [3, 4, 7, 2, 1]],
  [[4], [8, 5, 3, 7, 2, 0, 6, 10, 4, 9], [6], [10, 6], [7], [6, 7, 4], [10, 3, 5, 9], [3, 4, 2, 1, 9, 8, 6, 10, 0], [5, 9, 3, 10, 0, 2, 6, 4, 1, 7], [5, 3, 6], [0, 8, 2, 3, 9, 4, 6]],
  [[1], [0]],
  [[1, 7, 6, 3, 11, 8, 10], [5, 6], [5, 4, 0, 1, 7], [8, 5, 1, 6], [11, 1], [2, 1, 4, 11, 7, 8, 10], [10, 4, 8, 5, 9], [1, 4, 0, 8, 10, 6, 3, 2, 5, 11, 9], [1, 4], [11, 7, 6, 5, 2, 0, 8, 1], [8], [5, 4, 10, 2, 0, 9]],
  [[4, 6, 9, 1, 3, 8, 2, 5], [3, 0, 9, 6, 4], [6, 7, 4, 1, 5], [5, 4, 2, 6, 9, 1, 8, 7, 0], [9, 8, 6, 0, 1, 5, 7, 2, 3], [8, 7, 4, 0, 1, 3], [0, 2, 3, 7, 8], [4, 6], [2, 7, 6, 0, 4, 3, 5, 9], [1, 3, 7, 2, 5, 8, 6]],
  [[1, 4], [0, 2, 5], [5], [2, 5, 1], [3, 2, 1], [1, 3]],
  [[1], [0]],
  [[2], [0], [0]],
  [[2, 1], [2], [0]],
  [[1, 6, 3, 4, 5], [6, 2, 0, 4, 3], [1], [0, 6, 2, 5, 4], [2, 6, 1], [4, 1, 0, 6], [1, 3]],
  [[1], [0]],
  [[9, 6, 8, 10, 7, 1, 3, 4, 5], [6, 10, 2, 5, 3, 4], [1, 6, 7, 8, 4], [9, 7, 8, 10, 1, 0, 2], [6, 0, 10], [6, 9, 2, 7, 0, 8], [9, 2], [6, 5, 4, 9, 10, 1], [1, 3, 2, 9, 10], [0, 10, 7, 3, 6, 2, 5], [0]],
  [[5], [7, 3], [5], [2, 7], [3, 6, 2, 0, 7, 1, 5], [0, 3, 2, 4], [0, 2, 7, 1, 5, 4], [5, 6, 2, 1, 0, 4, 3]],
  [[2, 8, 5], [5, 0, 7, 6, 3, 4, 8], [6, 3, 1, 7, 5, 0, 4], [2], [8], [7], [8, 1, 2, 5, 4], [6], [4, 2, 1, 7]],
  [[9, 1, 6, 7, 2, 5, 4], [5, 8, 0, 9, 4, 3, 6, 2, 7], [0, 9, 7, 8, 5, 6], [0, 7, 9, 5, 2, 8], [1, 9, 8, 0], [1], [4, 0, 8, 3, 7, 2, 9, 1, 5], [8, 1, 5], [3, 6, 2, 4], [8, 7]],
  [[2], [0], [1]],
  [[4, 5, 2, 6], [6, 3, 2, 0, 4], [5, 6, 1, 4, 0, 3], [0, 2, 1, 6, 4], [3], [6, 1, 3, 4, 0, 2], [5, 3, 2]],
  [[3], [3, 0], [3], [1, 2]],
  [[2, 4, 5, 3, 6, 8, 1], [0, 5, 7, 2, 4, 6, 3, 8], [0], [7, 8, 5, 2, 1, 0], [6, 8, 3, 7, 2, 1, 0], [8, 7, 0, 2, 1, 3, 6], [3, 2, 4, 7, 0], [2, 6, 1, 4], [4]],
  [[11, 5, 7, 2, 4, 6, 8, 3, 1], [10, 2, 0, 8, 3], [6, 10, 3, 11, 4, 1, 0, 7, 8], [5, 6, 7, 1, 2, 9, 10], [10, 8, 2, 3, 5], [7, 3, 11, 6, 2, 1, 0, 10, 9, 8, 4], [0], [2, 0], [9, 6, 1, 11, 3, 5, 4, 10, 2, 0, 7], [3, 7, 2, 11, 6, 4], [1, 5], [6, 0, 10]],
  [[1, 5, 2, 3], [0, 4, 3, 5], [3], [4, 5, 2, 0, 1], [2], [1]],
  [[7, 10], [10, 8, 7, 4], [3, 7, 6, 4, 11, 10, 5, 9, 1], [8, 4, 9, 7], [5, 9, 10, 0], [7, 9, 1, 0, 10, 11], [5, 1, 10, 2, 11, 9, 4, 3], [8, 3], [3, 6, 10], [3, 7, 0, 11], [0, 6, 7], [10, 6, 5, 4]],
  [[3, 6, 8, 7, 1, 5, 4], [4], [8], [8, 2, 0, 1, 4, 5, 6, 7], [8, 2, 5, 1, 7], [3, 8, 0, 2], [7, 8, 1, 4, 3, 2, 0], [4, 2], [6, 2, 0, 7, 4, 5, 1, 3]],
];

for (let test of tests) {
  logOutList(shortestPathLength(test));
}

/*
[[1],[0,2,6],[1,3],[2],[5],[4,6],[1,5,7],[6]]
[[1,2,3],[0],[0],[0]]
[[1],[0,2,4],[1,3,4],[2],[1,2]]
[[5, 3, 1, 2, 4],[5, 0],[4, 3, 5, 0],[4],[5, 2, 3, 0, 1],[2, 1, 0, 3]]
[[2],[3],[1, 3],[0, 2, 1]]
[[4],[2, 5, 4, 3],[1, 4, 0, 5, 3],[1, 5, 2, 4],[2, 3, 5, 0],[4, 1, 2]]
[[8],[2, 9, 0, 11, 10, 8, 6, 5, 7, 3, 4],[5, 6, 10, 4, 8, 0, 7, 1, 11, 3, 9],[6, 1, 0, 10, 9, 7, 4, 11],[10, 3, 6, 1, 2, 0, 7],[6],[5, 8, 0, 7],[11, 8, 3, 10, 2, 5],[9, 6],[4, 0, 1, 7, 3, 8, 11, 6, 5, 10, 2],[2],[5, 4, 0, 3, 6, 1]]
[[1, 6],[8, 7],[7, 6, 5, 0, 4],[1, 0, 8],[8, 6],[0, 4, 1, 2, 3],[2, 3, 5, 0, 4, 7, 1],[8, 3, 1, 6, 5, 4],[4, 0, 3]]
[[4, 8],[4, 3, 7, 8, 5],[4, 0, 7, 5, 1, 3, 6, 8],[6, 2, 4],[3, 1, 2],[8, 6, 7, 3, 1, 4, 0],[3, 1, 7],[4],[2, 3]]
[[1, 2, 4, 5],[2, 3, 4],[3],[0],[0, 3, 1, 5],[1, 4, 0, 2]]
[[4, 9, 5, 7, 6, 8, 10],[5, 4, 10, 2, 3, 9, 6, 0, 7, 8],[7, 10, 5, 1, 0, 6],[9, 1, 5, 2, 0, 8, 4, 6, 7, 10],[9],[7, 6, 2, 4, 9, 8],[10, 3, 8, 1, 4, 7, 0],[10, 3, 2, 5, 4, 1, 8],[0, 2, 4, 10, 7],[2, 10, 5],[5, 1, 6, 4, 9, 0, 3, 7, 8]]
[[1, 2],[2, 0],[0]]
[[2, 8, 7, 9, 4, 1],[8, 9],[1, 3, 0, 8, 10],[9, 6, 5, 0, 10, 2, 4, 7],[7, 3, 5, 1, 6],[9, 6, 1, 4],[3, 4, 2, 7, 5],[4, 5, 8],[2],[0, 10, 8],[9, 5, 4, 3, 1, 7, 8, 6]]
[[1, 5, 9],[3, 0, 9, 5, 8, 2, 4, 7],[4, 3, 0, 1, 5, 9, 8, 7, 6],[8, 5],[6, 7, 1, 3],[2, 3, 9, 8, 7, 1, 4],[5, 2, 9],[2, 6, 8, 0, 4],[6, 0, 4],[8]]
[[4, 3, 2, 5, 1],[2],[0, 1, 5, 3],[5, 2, 0, 1],[3, 1, 5],[0, 2, 1, 4]]
[[1],[0]]
[[7, 3],[5],[5, 4, 1, 3, 6, 0],[2, 0, 6, 4],[3, 1],[7, 3],[0, 3, 2, 1, 5],[2, 1]]
[[4, 1, 3, 2, 5],[0, 2],[5, 0, 4, 3],[0, 1, 4, 2],[1, 0, 5, 3],[1, 0, 2, 4]]
[[3],[2],[0, 1],[0]]
[[3, 6, 7, 8, 2, 1, 4, 5],[6, 4, 8, 7, 2, 0, 5],[5, 7, 8, 0, 3, 4],[6, 1, 8, 4],[0, 6, 7, 3, 2, 8, 1],[8, 4, 1, 3, 6, 0, 7],[1, 2, 3, 5, 8, 4, 0, 7],[5, 4, 3, 1],[3, 4, 7, 2, 1]]
[[4],[8, 5, 3, 7, 2, 0, 6, 10, 4, 9],[6],[10, 6],[7],[6, 7, 4],[10, 3, 5, 9],[3, 4, 2, 1, 9, 8, 6, 10, 0],[5, 9, 3, 10, 0, 2, 6, 4, 1, 7],[5, 3, 6],[0, 8, 2, 3, 9, 4, 6]]
[[1],[0]]
[[1, 7, 6, 3, 11, 8, 10], [5, 6], [5, 4, 0, 1, 7], [8, 5, 1, 6], [11, 1], [2, 1, 4, 11, 7, 8, 10], [10, 4, 8, 5, 9], [1, 4, 0, 8, 10, 6, 3, 2, 5, 11, 9], [1, 4], [11, 7, 6, 5, 2, 0, 8, 1], [8], [5, 4, 10, 2, 0, 9]]
[[4, 6, 9, 1, 3, 8, 2, 5], [3, 0, 9, 6, 4], [6, 7, 4, 1, 5], [5, 4, 2, 6, 9, 1, 8, 7, 0], [9, 8, 6, 0, 1, 5, 7, 2, 3], [8, 7, 4, 0, 1, 3], [0, 2, 3, 7, 8], [4, 6], [2, 7, 6, 0, 4, 3, 5, 9], [1, 3, 7, 2, 5, 8, 6]]
[[1, 4], [0, 2, 5], [5], [2, 5, 1], [3, 2, 1], [1, 3]]
[[1], [0]]
[[2], [0], [0]]
[[2, 1], [2], [0]]
[[1, 6, 3, 4, 5], [6, 2, 0, 4, 3], [1], [0, 6, 2, 5, 4], [2, 6, 1], [4, 1, 0, 6], [1, 3]]
[[1], [0]]
[[9, 6, 8, 10, 7, 1, 3, 4, 5], [6, 10, 2, 5, 3, 4], [1, 6, 7, 8, 4], [9, 7, 8, 10, 1, 0, 2], [6, 0, 10], [6, 9, 2, 7, 0, 8], [9, 2], [6, 5, 4, 9, 10, 1], [1, 3, 2, 9, 10], [0, 10, 7, 3, 6, 2, 5], [0]]
[[5], [7, 3], [5], [2, 7], [3, 6, 2, 0, 7, 1, 5], [0, 3, 2, 4], [0, 2, 7, 1, 5, 4], [5, 6, 2, 1, 0, 4, 3]]
[[2, 8, 5], [5, 0, 7, 6, 3, 4, 8], [6, 3, 1, 7, 5, 0, 4], [2], [8], [7], [8, 1, 2, 5, 4], [6], [4, 2, 1, 7]]
[[9, 1, 6, 7, 2, 5, 4], [5, 8, 0, 9, 4, 3, 6, 2, 7], [0, 9, 7, 8, 5, 6], [0, 7, 9, 5, 2, 8], [1, 9, 8, 0], [1], [4, 0, 8, 3, 7, 2, 9, 1, 5], [8, 1, 5], [3, 6, 2, 4], [8, 7]]
[[2], [0], [1]]
[[4, 5, 2, 6], [6, 3, 2, 0, 4], [5, 6, 1, 4, 0, 3], [0, 2, 1, 6, 4], [3], [6, 1, 3, 4, 0, 2], [5, 3, 2]]
[[3], [3, 0], [3], [1, 2]]
[[2, 4, 5, 3, 6, 8, 1], [0, 5, 7, 2, 4, 6, 3, 8], [0], [7, 8, 5, 2, 1, 0], [6, 8, 3, 7, 2, 1, 0], [8, 7, 0, 2, 1, 3, 6], [3, 2, 4, 7, 0], [2, 6, 1, 4], [4]]
[[11, 5, 7, 2, 4, 6, 8, 3, 1], [10, 2, 0, 8, 3], [6, 10, 3, 11, 4, 1, 0, 7, 8], [5, 6, 7, 1, 2, 9, 10], [10, 8, 2, 3, 5], [7, 3, 11, 6, 2, 1, 0, 10, 9, 8, 4], [0], [2, 0], [9, 6, 1, 11, 3, 5, 4, 10, 2, 0, 7], [3, 7, 2, 11, 6, 4], [1, 5], [6, 0, 10]]
[[1, 5, 2, 3], [0, 4, 3, 5], [3], [4, 5, 2, 0, 1], [2], [1]]
[[7, 10], [10, 8, 7, 4], [3, 7, 6, 4, 11, 10, 5, 9, 1], [8, 4, 9, 7], [5, 9, 10, 0], [7, 9, 1, 0, 10, 11], [5, 1, 10, 2, 11, 9, 4, 3], [8, 3], [3, 6, 10], [3, 7, 0, 11], [0, 6, 7], [10, 6, 5, 4]]
[[3, 6, 8, 7, 1, 5, 4], [4], [8], [8, 2, 0, 1, 4, 5, 6, 7], [8, 2, 5, 1, 7], [3, 8, 0, 2], [7, 8, 1, 4, 3, 2, 0], [4, 2], [6, 2, 0, 7, 4, 5, 1, 3]]
*/

